Программа ::= список_определений
Тип ::= значимый_тип | void
значимый_тип ::= short | int | long | float | double
Определение ::= void определение_функции | определение_элементов
определение_элементов ::= значимый_тип   определение_функции_или_переменных 
определение_функции_или_переменных ::= 
определение_функции | список_определений_переменных ;
определение_переменной ::= определение_простой_переменной | определение_массива
определение_простой_переменной  ::= идентификатор_переменной возможная_инициализация
возможная_инициализация ::= = выражение
определение_массива ::= идентификатор_массива  список_границ
граница ::= [ целое ]
определение_функции ::= идентификатор_функции формальные_параметры тело_функции
тело_функции ::= ; | {} | ‘{‘ определения_переменных_операторы ‘}’
формальные_параметры ::= () | (  список формальных параметров )
формальный параметр ::= значимый_тип определение_параметра 
определение_параметра ::= идентификатор_переменной | идентификатор_массива список_границ
определения_переменных_операторы ::= список_определений_переменных_или_операторов
определение_переменных_или_оператор ::= 
определение_переменных_и_массивов | оператор | выражение_оператор
выражение_оператор ::= ; | выражение ;
определение_переменных_и_массивов ::= значимый_тип  список_определений_переменных ;
оператор ::= If | Do | While | For | Switch | Return | Continue | Break | Goto | метка



// Программа ::= список_определений
// Тип ::= значимый_тип | void
// значимый_тип ::= short | int | long | float | double
// Определение ::= void определение_функции | определение_элементов
// определение_элементов ::= значимый_тип   определение_функции_или_переменных 
// определение_функции_или_переменных ::= 
// определение_функции | список_определений_переменных ;
// определение_переменной ::= определение_простой_переменной | определение_массива
// определение_простой_переменной  ::= идентификатор_переменной возможная_инициализация
// возможная_инициализация ::= = выражение
// определение_массива ::= идентификатор_массива  список_границ
// граница ::= [ целое ]
// определение_функции ::= идентификатор_функции формальные_параметры тело_функции
// тело_функции ::= ; | {} | ‘{‘ определения_переменных_операторы ‘}’
// формальные_параметры ::= () | (  список формальных параметров )
// формальный параметр ::= значимый_тип определение_параметра 
// определение_параметра ::= идентификатор_переменной | идентификатор_массива список_границ
// определения_переменных_операторы ::= список_определений_переменных_или_операторов
// определение_переменных_или_оператор ::= определение_переменных_и_массивов | оператор | выражение_оператор
// выражение_оператор ::= ; | выражение ;
// определение_переменных_и_массивов ::= значимый_тип  список_определений_переменных ;
// оператор ::= If | Do | While | For | Switch | Return | Continue | Break | Goto | метка



Unary             ::= { 
                             Priority_Unary              Unary                    
                         |   Priority_Term               Unary                    
                         |   Priority_IncDec             Unary                    
                         |   
                                                      { 
                                                      Integer                  
                                                  |   Number                   
                                                  |   Syntax_IdentArr     [    '[' Expression  ']'  ]... 
                                                                           
                                                  |   Syntax_IdentFunc    { 
                                                                               Syntax_EmptyBracket      
                                                                          |    (  Expressions   )                        
                                                                          } 
                                                  |   Ident                    
                                                  |   Primary                  
                                                      }    
                                                      [  Priority_IncDec  ] 
                      } 


Unary             ::= { 
                             Priority_Unary              Unary                    
                         |   Priority_Term               Unary                    
                         |   Priority_IncDec             Unary                    
                         |   
                                                      { 
                          Integer                  
                      |   Number                   
                      |   Ident                    
                      |                                                         Syntax_IdentArr     [    '[' Expression  ']'  ]... 
                                                  |   Syntax_IdentFunc    {    Syntax_EmptyBracket  |    (  Expressions   )   } 
                                                  |   Primary                  
                                                      }    
                                                      [  Priority_IncDec  ] 
                      } 

Primary           ::= {
(   Expressions    ) 
                      }

Unary                    
                  ::=  { 
                             Priority_Unary           Unary                    
                         |   { + | - }                Unary                    
//                         |   Priority_Term            Unary                    
                         |   Priority_IncDec          Unary                    
                         |   Primary                  [ ++ | -- ]
//                         |   Primary                  [    Priority_IncDec    ] 
                       } 

Primary           ::=  { 
                             Integer                  
                         |   Number                   
                         |   Ident                    
                         |   Syntax_IdentArr          '['   Expression           ']'   [   '['  Expression    ']'   ]... 
                         |   Syntax_IdentFunc          {    Syntax_EmptyBracket   |    (   Expressions    )    } 
                         |   (     Expressions         )                        
                       }    
                         
