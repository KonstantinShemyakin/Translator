
S_                       
                         ::= Program                  
                         
Program                  
                         ::= Defines                  
                         
DefineParType            
                         ::= const                       void                        &                           { MAKE(DefType,11); }    
                         |   void                        &                           { MAKE(DefType,9); }     
                         |   const                       void                        { MAKE(DefType,3); }     
                         |   void                        { MAKE(DefType,1); }     
                         
DefParType               
                         ::= DefineParType               Ident_lexeme             
                         
DefPar                   
                         ::= =                           Assign                      { MAKE(ParVarAssign); }  
                         |   
                         
DefParItem               
                         ::= DefParType                  [                           { MAKE(DefParArr); }        DefArrDA                    DefPar                   
                         |   DefParType                  { MAKE(DefParVar); }        DefPar                   
                         
DefParamsList            
                         ::= ,                           DefParItem                  { TREE(AddToList); }        DefParamsList            
                         |   
                         
DefParams                
                         ::= { TREE(Define,2); }         DefParItem                  { TREE(AddToList); }        DefParamsList               { TREE(EndParams); }     
                         
BodyFunc                 
                         ::= ;                           { MAKE(BodyFunc); }      
                         |   '{'                         '}'                         { MAKE(BodyFunc,1); }    
                         |   '{'                         { MAKE(BegStmExprLL); }     StmExpr                     '}'                         { MAKE(BodyFunc,2); }    
                         
DefFuncType              
                         ::= static                      const                       void                        { MAKE(DefType,7); }     
                         |   static                      void                        { MAKE(DefType,5); }     
                         |   const                       void                        { MAKE(DefType,3); }     
                         |   void                        { MAKE(DefType,1); }     
                         |   static                      void                        { MAKE(DefType,36); }    
                         |   void                        { MAKE(DefType,32); }    
                         
DefFuncParams            
                         ::= )                           { TREE(EndParams,2); }   
                         |   DefParams                   )                        
                         
DefFunc                  
                         ::= DefFuncType                 Ident_lexeme                (                           { MAKE(FuncIdent); }        DefFuncParams               BodyFunc                 
                         
AInitialList             
                         ::= ,                           AInitItem                   { TREE(AddToList); }        AInitialList             
                         |   
                         
AInitial                 
                         ::= AInitItem                   { TREE(AddToList); }        AInitialList             
                         
Initializer              
                         ::= '{'                         '}'                         { TREE(NodeListLL); }    
                         |   '{'                         { TREE(NodeListLL); }       AInitial                    '}'                      
                         
AInitItem                
                         ::= Initializer              
                         |   Assign                   
                         
DefAInit                 
                         ::= =                           Initializer                 { MAKE(EndAInit); }      
                         |   
                         
DRanges                  
                         ::= [                           Assign                      ]                           { MAKE(DRange); }           DRanges                  
                         |   
                         
DefArrD1A                
                         ::= ]                           { MAKE(DefArrD1AEmpty); }
                         |   Assign                      ]                           { MAKE(DRange); }        
                         
DefArrDA                 
                         ::= DefArrD1A                   DRanges                  
                         
DefArr                   
                         ::= Ident_lexeme                [                           { MAKE(DefArray); }         DefArrDA                    DefAInit                 
                         
DefVarInit               
                         ::= =                           Assign                      { MAKE(DefVarAssign); }  
                         |   
                         
DefVar                   
                         ::= Ident_lexeme                { MAKE(DefIdent); }         DefVarInit               
                         
DefItem                  
                         ::= &                           DefArr                      { TREE(RefDef); }        
                         |   &                           DefVar                      { TREE(RefDef); }        
                         |   DefArr                   
                         |   DefVar                   
                         
DefType                  
                         ::= static                      const                       void                        { MAKE(DefType,7); }        { MAKE(Define,1); }      
                         |   static                      void                        { MAKE(DefType,5); }        { MAKE(Define,1); }      
                         |   const                       void                        { MAKE(DefType,3); }        { MAKE(Define,1); }      
                         |   void                        { MAKE(DefType,1); }        { MAKE(Define,1); }      
                         
DefineList               
                         ::= ,                           DefItem                     { TREE(AddToList); }        DefineList               
                         |   
                         
Define                   
                         ::= DefType                     DefItem                     { TREE(AddToList); }        DefineList               
                         
ConditionVar             
                         ::= &                           DefVar                      { TREE(RefDef); }        
                         |   DefVar                   
                         
Condition                
                         ::= DefType                     ConditionVar                { MAKE(PushDef); }       
                         |   ExpressionCondition      
                         
ExpressionsList          
                         ::= ,                           Assign                      { TREE(AddToList); }        ExpressionsList          
                         |   
                         
Expressions              
                         ::= Assign                      { MAKE(ExpressionsLL); }    ExpressionsList          
                         
AssignList               
                         ::= Priority_Assign             Assign                      { MAKE(Binary); }        
                         |   
                         
Assign                   
                         ::= Question                    AssignList               
                         
QuestionList             
                         ::= Priority_Question           ExpressionValue             :                           Question                    { MAKE(Question); }      
                         |   
                         
Question                 
                         ::= OrOr                        QuestionList             
                         
OrOr                     
                         ::= AndAnd                      { NODE(None,(1,2)); }       OrOr_                    
                         
OrOr_                    
                         ::= Priority_OrOr               AndAnd                      { MAKE(Binary); }           { NODE(Binary,(3,1,2)); }   OrOr_                    
                         |   
                         
AndAnd                   
                         ::= Or                          { NODE(None,(1,2)); }       AndAnd_                  
                         
AndAnd_                  
                         ::= Priority_AndAnd             Or                          { MAKE(Binary); }           { NODE(Binary,(3,1,2)); }   AndAnd_                  
                         |   
                         
Or                       
                         ::= XOr                         { NODE(None,(1,2)); }       Or_                      
                         
Or_                      
                         ::= Priority_Or                 XOr                         { MAKE(Binary); }           { NODE(Binary,(3,1,2)); }   Or_                      
                         |   
                         
XOr                      
                         ::= And                         { NODE(None,(1,2)); }       XOr_                     
                         
XOr_                     
                         ::= Priority_XOr                And                         { MAKE(Binary); }           { NODE(Binary,(3,1,2)); }   XOr_                     
                         |   
                         
And                      
                         ::= Equ                         { NODE(None,(1,2)); }       And_                     
                         
And_                     
                         ::= Priority_And                Equ                         { MAKE(Binary); }           { NODE(Binary,(3,1,2)); }   And_                     
                         |   
                         
Equ                      
                         ::= Compare                     { NODE(None,(1,2)); }       Equ_                     
                         
Equ_                     
                         ::= Priority_Equ                Compare                     { MAKE(Binary); }           { NODE(Binary,(3,1,2)); }   Equ_                     
                         |   
                         
Compare                  
                         ::= Shift                       { NODE(None,(1,2)); }       Compare_                 
                         
Compare_                 
                         ::= Priority_Compare            Shift                       { MAKE(Binary); }           { NODE(Binary,(3,1,2)); }   Compare_                 
                         |   
                         
Shift                    
                         ::= Term                        { NODE(None,(1,2)); }       Shift_                   
                         
Shift_                   
                         ::= Priority_Shift              Term                        { MAKE(Binary); }           { NODE(Binary,(3,1,2)); }   Shift_                   
                         |   
                         
Term                     
                         ::= Factor                      { NODE(None,(1,2)); }       Term_                    
                         
Term_                    
                         ::= Priority_Term               Factor                      { MAKE(Binary); }           { NODE(Binary,(3,1,2)); }   Term_                    
                         |   
                         
Factor                   
                         ::= Unary                       { NODE(None,(1,2)); }       Factor_                  
                         
Factor_                  
                         ::= Priority_Factor             Unary                       { MAKE(Binary); }           { NODE(Binary,(3,1,2)); }   Factor_                  
                         |   
                         
UnaryIncDec              
                         ::= Priority_IncDec             { MAKE(IncDec); }           UnaryIncDec              
                         |   
                         
DefineCast               
                         ::= const                       void                        { MAKE(DefType,3); }     
                         |   void                        { MAKE(DefType,1); }     
                         
Unary                    
                         ::= Priority_Unary              Unary                       { MAKE(Unary); }         
                         |   Priority_Term               Unary                       { MAKE(Unary); }         
                         |   Priority_IncDec             Unary                       { MAKE(Unary); }         
                         |   (                           DefineCast                  )                           Unary                       { MAKE(Cast); }          
                         |   PrimaryExpr                 UnaryIncDec              
                         
Primary                  
                         ::= (                           ExpressionNone              )                           { TREE(Primary); }       
                         
PrimaryExpr              
                         ::= Ident_lexeme                [                           Ranges                   
                         |   Ident_lexeme                (                           CallParams               
                         |   Integer_lexeme              { MAKE(Number); }        
                         |   Number_lexeme               { MAKE(Number); }        
                         |   Ident_lexeme                { MAKE(Ident); }         
                         |   Primary                  
                         |   void                        Primary                     { MAKE(Cast); }          
                         
Range                    
                         ::= [                           ExpressionValue             ]                           { MAKE(IndexLL); }          Range                    
                         |   
                         
Ranges                   
                         ::= { MAKE(BegIndexLL); }       ExpressionValue             ]                           { MAKE(IndexLL); }          Range                       { MAKE(EndIndex); }      
                         
CallParams               
                         ::= )                           { MAKE(Params); }        
                         |   ExpressionValueList         )                           { MAKE(Params,1); }      
                         
CompaundStmnt            
                         ::= '{'                         '}'                         { MAKE(Compaund); }      
                         |   '{'                         { MAKE(Compaund); }         StmExpr                     '}'                      
                         
IfStmntElse              
                         ::= else                        DefExpr                     { MAKE(If,1); }          
                         |   { MAKE(If); }            
                         
IfStmnt                  
                         ::= if                          (                           Condition                   )                           DefExpr                     IfStmntElse              
                         
ForPrefix                
                         ::= ;                           { TREE(NodeNull); }      
                         |   DefineSemi               
                         |   ExprSemi                 
                         
ForCondition             
                         ::= ;                           { MAKE(NodeNull); }      
                         |   Condition                   ;                        
                         
ForPostfix               
                         ::= )                           { TREE(NodeNull); }      
                         |   ExpressionExpression        )                        
                         
ForStmnt                 
                         ::= for                         (                           { MAKE(BegFor); }           ForPrefix                   ForCondition                ForPostfix                  DefExpr                     { MAKE(For); }           
                         
DoStmnt                  
                         ::= do                          { MAKE(BegDo); }            DefExpr                     while                       (                           Condition                   )                           ;                           { MAKE(Do); }            
                         
WhileStmnt               
                         ::= while                       { MAKE(BegWhile); }         (                           Condition                   )                           DefExpr                     { MAKE(While); }         
                         
SwitchStmnt              
                         ::= switch                      (                           )                        
                         
GoToStmnt                
                         ::= goto                        Ident_lexeme                ;                           { MAKE(GoTo); }          
                         
BreakStmnt               
                         ::= break                       ;                           { MAKE(Break); }         
                         
ContinueStmnt            
                         ::= continue                    ;                           { MAKE(Continue); }      
                         
ReturnValue              
                         ::= ExpressionValue             { MAKE(Return,1); }      
                         |   { MAKE(Return); }        
                         
ReturnStmnt              
                         ::= return                      ReturnValue                 ;                        
                         
Statement                
                         ::= IfStmnt                  
                         |   DoStmnt                  
                         |   WhileStmnt               
                         |   ForStmnt                 
                         |   SwitchStmnt              
                         |   GoToStmnt                
                         |   BreakStmnt               
                         |   ContinueStmnt            
                         |   ReturnStmnt              
                         |   CompaundStmnt            
                         
DefineSemi               
                         ::= Define                      ;                        
                         
ExprSemi                 
                         ::= ExpressionExpression        ;                        
                         
DefExpr                  
                         ::= ;                           { TREE(NodeNull); }      
                         |   Ident_lexeme                :                           DefExpr                     { TREE(Label); }         
                         |   DefineSemi               
                         |   Statement                
                         |   ExprSemi                 
                         
StmExpr                  
                         ::= DefExpr                     { TREE(AddToList); }        StmExpr                  
                         |   
                         
DefFAV                   
                         ::= ;                           { TREE(NodeNull); }      
                         |   DefFunc                  
                         |   DefineSemi               
                         
DefinesBeg               
                         ::= DefFAV                      { TREE(AddToList); }        DefinesBeg               
                         |   
                         
Defines                  
                         ::= { MAKE(BegStmExprLL); }     DefinesBeg               
                         
ExpressionExpression     
                         ::= Expressions                 { TREE(ExpressionSLL,16); }                       
                         
ExpressionCondition      
                         ::= Expressions                 { TREE(ExpressionSLL,241); }                      
                         
ExpressionNone           
                         ::= Expressions                 { TREE(ExpressionSLL); } 
                         
ExpressionValue          
                         ::= Expressions                 { TREE(ExpressionSLL,256); }                      
                         
ExpressionValueList      
                         ::= Expressions                 { TREE(ExpressionSLL,512); }                      
                         
