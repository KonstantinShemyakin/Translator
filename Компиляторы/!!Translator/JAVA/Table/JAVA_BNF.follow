compilation_unit         -> Eof                      
type_declarations_or_not -> Eof                      
type_declarations        -> <Separator,Semicolon>    <Ident,11>                <Ident,12>                <Reserv,Class>           <Reserv,Interface>       Eof                      
type_declaration         -> <Separator,Semicolon>    <Ident,11>                <Ident,12>                <Reserv,Class>           <Reserv,Interface>       Eof                      
class_declaration        -> <Separator,Semicolon>    <Ident,11>                <Ident,12>                <Reserv,Class>           <Reserv,Interface>       Eof                      
class_modifiers_or_not   -> <Reserv,Class>           
super_super_or_not       -> <Separator,LeftCramp>    <Reserv,Implements>      
interfaces_or_not        -> <Separator,LeftCramp>    
class_modifiers          -> <Ident,11>                <Reserv,Class>           
super_super              -> <Separator,LeftCramp>    <Reserv,Implements>      
interfaces               -> <Separator,LeftCramp>    
interface_type_list      -> <Separator,LeftCramp>    <Separator,Comma>        
class_body               -> <Separator,Semicolon>    <Ident,11>                <Ident,12>                <Reserv,Class>           <Reserv,Interface>       Eof                      
class_body_declarations_or_not-> <Separator,RightCramp>   
class_body_declarations  -> <Separator,RightCramp>   <Ident,1>                <Ident,7>                <Ident,8>                <Ident,9>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Static>          
class_body_declaration   -> <Separator,RightCramp>   <Ident,1>                <Ident,7>                <Ident,8>                <Ident,9>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Static>          
class_member_declaration -> <Separator,RightCramp>   <Ident,1>                <Ident,7>                <Ident,8>                <Ident,9>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Static>          
static_initializer       -> <Separator,RightCramp>   <Ident,1>                <Ident,7>                <Ident,8>                <Ident,9>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Static>          
constructor_declaration  -> <Separator,RightCramp>   <Ident,1>                <Ident,7>                <Ident,8>                <Ident,9>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Static>          
constructor_modifiers_or_not-> <Ident,1>                
throws_throws_or_not     -> <Separator,LeftCramp>    <Separator,Semicolon>    
constructor_modifiers    -> <Ident,1>                <Ident,9>                
constructor_declarator   -> <Separator,LeftCramp>    <Reserv,Throws>          
formal_parameter_list_or_not-> <Separator,RightBracket> 
formal_parameter_list    -> <Separator,RightBracket> <Separator,Comma>        
formal_parameter         -> <Separator,RightBracket> <Separator,Comma>        
throws_throws            -> <Separator,LeftCramp>    <Separator,Semicolon>    
class_type_list          -> <Separator,LeftCramp>    <Separator,Comma>        <Separator,Semicolon>    
constructor_body         -> <Separator,RightCramp>   <Ident,1>                <Ident,7>                <Ident,8>                <Ident,9>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Static>          
explicit_constructor_invocation_or_not-> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Do>              <Reserv,Continue>        <Reserv,Break>           
                            <Reserv,Return>          <Reserv,Switch>          <Reserv,Try>             <Reserv,Throw>           <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    <Reserv,New>             <Reserv,Null>            
block_statements_or_not  -> <Separator,RightCramp>   
explicit_constructor_invocation-> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Do>              <Reserv,Continue>        <Reserv,Break>           
                            <Reserv,Return>          <Reserv,Switch>          <Reserv,Try>             <Reserv,Throw>           <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    <Reserv,New>             <Reserv,Null>            
argument_list_or_not     -> <Separator,RightBracket> 
field_declaration        -> <Separator,RightCramp>   <Ident,1>                <Ident,7>                <Ident,8>                <Ident,9>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Static>          
field_modifiers_or_not   -> <Ident,14>                <Ident,15>                <Ident,16>                
field_modifiers          -> <Ident,8>                <Ident,14>                <Ident,15>                <Ident,16>                
variable_declarators     -> <Separator,Comma>        <Separator,Semicolon>    
variable_declarator      -> <Separator,RightCramp>   <Separator,Comma>        <Separator,Semicolon>    <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
variable_declarator_id   -> <Oper,Assign>            <Separator,RightCramp>   <Separator,RightBracket> <Separator,LeftScrape>   <Separator,Comma>        <Separator,Semicolon>    <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                
                            <Ident,16>                <Reserv,Void>            
variable_initializer     -> <Separator,RightCramp>   <Separator,Comma>        <Separator,Semicolon>    <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
method_declaration       -> <Separator,RightCramp>   <Ident,1>                <Ident,7>                <Ident,8>                <Ident,9>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Static>          
method_header            -> <Separator,LeftCramp>    <Separator,Semicolon>    
method_modifiers_or_not  -> <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
result_type              -> <Ident>                  
method_modifiers         -> <Ident,7>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
method_declarator        -> <Separator,LeftCramp>    <Separator,Semicolon>    <Reserv,Throws>          
method_body              -> <Separator,RightCramp>   <Ident,1>                <Ident,7>                <Ident,8>                <Ident,9>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Static>          
interface_declaration    -> <Separator,Semicolon>    <Ident,11>                <Ident,12>                <Reserv,Class>           <Reserv,Interface>       Eof                      
interface_modifiers_or_not-> <Reserv,Interface>       
extends_interfaces_or_not-> <Separator,LeftCramp>    
interface_modifiers      -> <Ident,12>                <Reserv,Interface>       
extends_interfaces       -> <Separator,LeftCramp>    <Separator,Comma>        
interface_body           -> <Separator,Semicolon>    <Ident,11>                <Ident,12>                <Reserv,Class>           <Reserv,Interface>       Eof                      
interface_member_declarations_or_not-> <Separator,RightCramp>   
interface_member_declarations-> <Separator,RightCramp>   <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
interface_member_declaration-> <Separator,RightCramp>   <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
constant_declaration     -> <Separator,RightCramp>   <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
abstract_method_declaration-> <Separator,RightCramp>   <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
abstract_method_modifiers_or_not-> <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
abstract_method_modifiers-> <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
array_initializer        -> <Separator,RightCramp>   <Separator,Comma>        <Separator,Semicolon>    <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
variable_initializers_or_not-> <Separator,RightCramp>   <Separator,Comma>        
array_initializer_comma_or_not-> <Separator,RightCramp>   
array_initializer_comma  -> <Separator,RightCramp>   
variable_initializers    -> <Separator,RightCramp>   <Separator,Comma>        
type                     -> <Separator,LeftScrape>   <Ident>                  
reference_type           -> <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                
                            <Oper,GE>                <Oper,Question>          <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                
                            <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
class_or_interface_type  -> <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                
                            <Oper,GE>                <Oper,Question>          <Separator,RightCramp>   <Separator,RightBracket> <Separator,LeftScrape>   <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                
                            <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
array_type               -> <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                
                            <Oper,GE>                <Oper,Question>          <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                
                            <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
block                    -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,1>                
                            <Ident,5>                <Ident,6>                <Ident,7>                <Ident,8>                <Ident,9>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           
                            <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           
                            <Reserv,Catch>           <Reserv,Default>         <Reserv,Void>            <Reserv,Static>          <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    <Reserv,Finally>         <Reserv,New>             <Reserv,Null>            
block_statements         -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Do>              <Reserv,Continue>        <Reserv,Break>           
                            <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    <Reserv,New>             
                            <Reserv,Null>            
block_statement          -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Do>              <Reserv,Continue>        <Reserv,Break>           
                            <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    <Reserv,New>             
                            <Reserv,Null>            
local_variable_declaration_statement-> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Do>              <Reserv,Continue>        <Reserv,Break>           
                            <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    <Reserv,New>             
                            <Reserv,Null>            
local_variable_declaration-> <Separator,Semicolon>    
statement                -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Do>              <Reserv,Continue>        <Reserv,Break>           
                            <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    <Reserv,New>             
                            <Reserv,Null>            
statement_no_short_if    -> <Reserv,Else>            
statement_without_trailing_substatement-> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    
                            <Reserv,New>             <Reserv,Null>            
empty_statement          -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    
                            <Reserv,New>             <Reserv,Null>            
labeled_statement        -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Do>              <Reserv,Continue>        <Reserv,Break>           
                            <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    <Reserv,New>             
                            <Reserv,Null>            
labeled_statement_no_short_if-> <Reserv,Else>            
expression_statement     -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    
                            <Reserv,New>             <Reserv,Null>            
statement_expression     -> <Separator,RightBracket> <Separator,Comma>        <Separator,Semicolon>    
if_then_statement        -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Do>              <Reserv,Continue>        <Reserv,Break>           
                            <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    <Reserv,New>             
                            <Reserv,Null>            
if_then_else_statement   -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Do>              <Reserv,Continue>        <Reserv,Break>           
                            <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    <Reserv,New>             
                            <Reserv,Null>            
if_then_else_statement_no_short_if-> <Reserv,Else>            
switch_statement         -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    
                            <Reserv,New>             <Reserv,Null>            
switch_block             -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    
                            <Reserv,New>             <Reserv,Null>            
switch_block_statement_groups_or_not-> <Separator,RightCramp>   <Reserv,Case>            <Reserv,Default>         
switch_labels_or_not     -> <Separator,RightCramp>   
switch_block_statement_groups-> <Separator,RightCramp>   <Reserv,Case>            <Reserv,Default>         
switch_block_statement_group-> <Separator,RightCramp>   <Reserv,Case>            <Reserv,Default>         
switch_labels            -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Do>              <Reserv,Continue>        <Reserv,Break>           
                            <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    <Reserv,New>             
                            <Reserv,Null>            
switch_label             -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Do>              <Reserv,Continue>        <Reserv,Break>           
                            <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    <Reserv,New>             
                            <Reserv,Null>            
while_statement          -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Do>              <Reserv,Continue>        <Reserv,Break>           
                            <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    <Reserv,New>             
                            <Reserv,Null>            
while_statement_no_short_if-> <Reserv,Else>            
do_statement             -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    
                            <Reserv,New>             <Reserv,Null>            
for_statement            -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Do>              <Reserv,Continue>        <Reserv,Break>           
                            <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    <Reserv,New>             
                            <Reserv,Null>            
for_init_or_not          -> <Separator,Semicolon>    
expression_or_not        -> <Separator,Semicolon>    
for_update_or_not        -> <Separator,RightBracket> 
for_statement_no_short_if-> <Reserv,Else>            
for_init                 -> <Separator,Semicolon>    
for_update               -> <Separator,RightBracket> 
statement_expression_list-> <Separator,RightBracket> <Separator,Comma>        <Separator,Semicolon>    
break_statement          -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    
                            <Reserv,New>             <Reserv,Null>            
identifier_or_not        -> <Separator,Semicolon>    
continue_statement       -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    
                            <Reserv,New>             <Reserv,Null>            
return_statement         -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    
                            <Reserv,New>             <Reserv,Null>            
throws_statement         -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    
                            <Reserv,New>             <Reserv,Null>            
synchronized_statement   -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    
                            <Reserv,New>             <Reserv,Null>            
try_statement            -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    
                            <Reserv,New>             <Reserv,Null>            
catches_or_not           -> <Reserv,Finally>         
catches                  -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Catch>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           
                            <Reserv,Synchronized>    <Reserv,Finally>         <Reserv,New>             <Reserv,Null>            
catch_clause             -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Catch>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           
                            <Reserv,Synchronized>    <Reserv,Finally>         <Reserv,New>             <Reserv,Null>            
finally_finally          -> <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,Semicolon>    <Integer>                <Number>                 <Ident>                  <Ident,5>                
                            <Ident,6>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,For>             <Reserv,While>           <Reserv,If>              <Reserv,Else>            <Reserv,Do>              <Reserv,Continue>        
                            <Reserv,Break>           <Reserv,Return>          <Reserv,Switch>          <Reserv,Case>            <Reserv,Try>             <Reserv,Throw>           <Reserv,Default>         <Reserv,This>            <Reserv,Super>           <Reserv,Synchronized>    
                            <Reserv,New>             <Reserv,Null>            
constant_expression      -> <Separator,Colon>        
expression               -> <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                
                            <Ident,16>                <Reserv,Void>            
assignment_expression    -> <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                
                            <Ident,16>                <Reserv,Void>            
assignment               -> <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                
                            <Ident,16>                <Reserv,Void>            
left_hand_side           -> <Oper,AddAssign>         <Oper,SubAssign>         <Oper,MultiAssign>       <Oper,DivAssign>         <Oper,ModAssign>         <Oper,AndAssign>         <Oper,OrAssign>          <Oper,XOrAssign>         <Oper,Assign>            <Oper,LShiftAssign>      
                            <Oper,RShiftAssign>      <Oper,RZShiftAssign>     
assignment_operator      -> <Oper,Add>               <Oper,Sub>               <Oper,Tilda>             <Oper,Not>               <Oper,PlusPlus>          <Oper,MinusMinus>        <Separator,LeftBracket>  <Integer>                <Number>                 <Ident,5>                
                            <Ident,6>                <Reserv,This>            <Reserv,Super>           <Reserv,New>             <Reserv,Null>            
conditional_expression   -> <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                
                            <Ident,16>                <Reserv,Void>            
conditional_or_expression-> <Oper,OrOr>              <Oper,Question>          <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                
                            <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
conditional_and_expression-> <Oper,OrOr>              <Oper,AndAnd>            <Oper,Question>          <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                
                            <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
inclusive_or_expression  -> <Oper,Or>                <Oper,OrOr>              <Oper,AndAnd>            <Oper,Question>          <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        
                            <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
exclusive_or_expression  -> <Oper,Or>                <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               <Oper,Question>          <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    
                            <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
and_expression           -> <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               <Oper,Question>          <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        
                            <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
equality_expression      -> <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               <Oper,Equ>               <Oper,NotEqu>            <Oper,Question>          <Separator,RightCramp>   <Separator,RightBracket> 
                            <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
relational_expression    -> <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                
                            <Oper,GE>                <Oper,Question>          <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                
                            <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
shift_expression         -> <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                
                            <Oper,GE>                <Oper,LShift>            <Oper,RShift>            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    
                            <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
additive_expression      -> <Oper,Add>               <Oper,Sub>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                
                            <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  
                            <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
multiplicative_expression-> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            <Oper,Question>          <Oper,RZShift>           
                            <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                
                            <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
cast_expression          -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            <Oper,Question>          <Oper,RZShift>           
                            <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                
                            <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
unary_expression         -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            <Oper,Question>          <Oper,RZShift>           
                            <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                
                            <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
predecrement_expression  -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            <Oper,Question>          <Oper,RZShift>           
                            <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                
                            <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
preincrement_expression  -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            <Oper,Question>          <Oper,RZShift>           
                            <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                
                            <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
unary_expression_not_plus_minus-> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            <Oper,Question>          <Oper,RZShift>           
                            <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                
                            <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
postdecrement_expression -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,PlusPlus>          <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            
                            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                
                            <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
postincrement_expression -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,PlusPlus>          <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            
                            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                
                            <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
postfix_expression       -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,PlusPlus>          <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            
                            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                
                            <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
method_invocation        -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,PlusPlus>          <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            
                            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,LeftScrape>   <Separator,RightScrape>  <Separator,Point>        <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        
                            <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
field_access             -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,AddAssign>         <Oper,SubAssign>         <Oper,MultiAssign>       <Oper,DivAssign>         <Oper,ModAssign>         
                            <Oper,AndAssign>         <Oper,OrAssign>          <Oper,XOrAssign>         <Oper,Assign>            <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               <Oper,PlusPlus>          
                            <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            <Oper,LShiftAssign>      
                            <Oper,RShiftAssign>      <Oper,Question>          <Oper,RZShift>           <Oper,RZShiftAssign>     <Separator,RightCramp>   <Separator,RightBracket> <Separator,LeftScrape>   <Separator,RightScrape>  <Separator,Point>        <Separator,Comma>        
                            <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
primary                  -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,PlusPlus>          <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            
                            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Point>        <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                
                            <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
primary_no_new_array     -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,PlusPlus>          <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            
                            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,LeftScrape>   <Separator,RightScrape>  <Separator,Point>        <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        
                            <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
class_instance_creation_expression-> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,PlusPlus>          <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            
                            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,LeftScrape>   <Separator,RightScrape>  <Separator,Point>        <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        
                            <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
argument_list            -> <Separator,RightBracket> <Separator,Comma>        
array_creation_expression-> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,PlusPlus>          <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            
                            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Point>        <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                
                            <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
dims_or_not              -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,PlusPlus>          <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            
                            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,RightScrape>  <Separator,Point>        <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                
                            <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
dim_exprs                -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,PlusPlus>          <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            
                            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,LeftScrape>   <Separator,RightScrape>  <Separator,Point>        <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        
                            <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
dim_expr                 -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,PlusPlus>          <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            
                            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,LeftScrape>   <Separator,RightScrape>  <Separator,Point>        <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        
                            <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
dims                     -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,PlusPlus>          <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            
                            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,LeftScrape>   <Separator,RightScrape>  <Separator,Point>        <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        
                            <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
array_access             -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,AddAssign>         <Oper,SubAssign>         <Oper,MultiAssign>       <Oper,DivAssign>         <Oper,ModAssign>         
                            <Oper,AndAssign>         <Oper,OrAssign>          <Oper,XOrAssign>         <Oper,Assign>            <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               <Oper,PlusPlus>          
                            <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            <Oper,LShiftAssign>      
                            <Oper,RShiftAssign>      <Oper,Question>          <Oper,RZShift>           <Oper,RZShiftAssign>     <Separator,RightCramp>   <Separator,RightBracket> <Separator,LeftScrape>   <Separator,RightScrape>  <Separator,Point>        <Separator,Comma>        
                            <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
expression_name          -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,AddAssign>         <Oper,SubAssign>         <Oper,MultiAssign>       <Oper,DivAssign>         <Oper,ModAssign>         
                            <Oper,AndAssign>         <Oper,OrAssign>          <Oper,XOrAssign>         <Oper,Assign>            <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               <Oper,PlusPlus>          
                            <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            <Oper,LShiftAssign>      
                            <Oper,RShiftAssign>      <Oper,Question>          <Oper,RZShift>           <Oper,RZShiftAssign>     <Separator,RightCramp>   <Separator,RightBracket> <Separator,LeftScrape>   <Separator,RightScrape>  <Separator,Comma>        <Separator,Semicolon>    
                            <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
method_name              -> <Separator,LeftBracket>  
identifier               -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,AddAssign>         <Oper,SubAssign>         <Oper,MultiAssign>       <Oper,DivAssign>         <Oper,ModAssign>         
                            <Oper,AndAssign>         <Oper,OrAssign>          <Oper,XOrAssign>         <Oper,Assign>            <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               <Oper,PlusPlus>          
                            <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            <Oper,LShiftAssign>      
                            <Oper,RShiftAssign>      <Oper,Question>          <Oper,RZShift>           <Oper,RZShiftAssign>     <Separator,LeftCramp>    <Separator,RightCramp>   <Separator,LeftBracket>  <Separator,RightBracket> <Separator,LeftScrape>   <Separator,RightScrape>  
                            <Separator,Point>        <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            
                            <Reserv,Extends>         <Reserv,Implements>      <Reserv,Instanceof>      
simple_type_name         -> <Separator,LeftBracket>  
literal                  -> <Oper,Add>               <Oper,Sub>               <Oper,Multi>             <Oper,Div>               <Oper,Mod>               <Oper,Or>                <Oper,And>               <Oper,OrOr>              <Oper,AndAnd>            <Oper,XOr>               
                            <Oper,PlusPlus>          <Oper,MinusMinus>        <Oper,Equ>               <Oper,NotEqu>            <Oper,LT>                <Oper,LE>                <Oper,GT>                <Oper,GE>                <Oper,LShift>            <Oper,RShift>            
                            <Oper,Question>          <Oper,RZShift>           <Separator,RightCramp>   <Separator,RightBracket> <Separator,LeftScrape>   <Separator,RightScrape>  <Separator,Point>        <Separator,Comma>        <Separator,Semicolon>    <Separator,Colon>        
                            <Ident,10>                <Ident,13>                <Ident,14>                <Ident,15>                <Ident,16>                <Reserv,Void>            <Reserv,Instanceof>      
