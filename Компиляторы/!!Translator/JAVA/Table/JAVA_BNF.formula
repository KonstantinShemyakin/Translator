
--- Grammar --- formula=157, produce=314, item=564, maker=0, used=157, vector=0, type=050002 ---

compilation_unit:        used=1, 00000
[  0] compilation_unit   -> type_declarations_or_not 
type_declarations_or_not:used=1, 00001
[  0] type_declarations_or_not-> type_declarations        
[  1] type_declarations_or_not-> 
type_declarations:       used=2, 00002
[  0] type_declarations  -> type_declaration         
[  1] type_declarations  -> type_declarations        type_declaration         
type_declaration:        used=2, 00003
[  0] type_declaration   -> class_declaration        
[  1] type_declaration   -> interface_declaration    
[  2] type_declaration   -> <Separator,Semicolon>    
class_declaration:       used=1, 00004
[  0] class_declaration  -> class_modifiers_or_not   <Reserv,Class>           identifier               super_super_or_not       interfaces_or_not        class_body               
class_modifiers_or_not:  used=1, 00005
[  0] class_modifiers_or_not-> class_modifiers          
[  1] class_modifiers_or_not-> 
super_super_or_not:      used=1, 00006
[  0] super_super_or_not -> super_super              
[  1] super_super_or_not -> 
interfaces_or_not:       used=1, 00007
[  0] interfaces_or_not  -> interfaces               
[  1] interfaces_or_not  -> 
class_modifiers:         used=2, 00008
[  0] class_modifiers    -> <Ident,11>                
[  1] class_modifiers    -> class_modifiers          <Ident,11>                
super_super:             used=1, 00009
[  0] super_super        -> <Reserv,Extends>         <Ident,14>                
interfaces:              used=1, 00010
[  0] interfaces         -> <Reserv,Implements>      interface_type_list      
interface_type_list:     used=2, 00011
[  0] interface_type_list-> <Ident,15>                
[  1] interface_type_list-> interface_type_list      <Separator,Comma>        <Ident,15>                
class_body:              used=1, 00012
[  0] class_body         -> <Separator,LeftCramp>    class_body_declarations_or_not                    <Separator,RightCramp>   
class_body_declarations_or_not:used=1, 00013
[  0] class_body_declarations_or_not-> class_body_declarations  
[  1] class_body_declarations_or_not-> 
class_body_declarations: used=2, 00014
[  0] class_body_declarations-> class_body_declaration   
[  1] class_body_declarations-> class_body_declarations  class_body_declaration   
class_body_declaration:  used=2, 00015
[  0] class_body_declaration-> class_member_declaration 
[  1] class_body_declaration-> static_initializer       
[  2] class_body_declaration-> constructor_declaration  
class_member_declaration:used=1, 00016
[  0] class_member_declaration-> field_declaration        
[  1] class_member_declaration-> method_declaration       
static_initializer:      used=1, 00017
[  0] static_initializer -> <Reserv,Static>          block                    
constructor_declaration: used=1, 00018
[  0] constructor_declaration-> constructor_modifiers_or_not                      constructor_declarator   throws_throws_or_not     constructor_body         
constructor_modifiers_or_not:used=1, 00019
[  0] constructor_modifiers_or_not-> constructor_modifiers    
[  1] constructor_modifiers_or_not-> 
throws_throws_or_not:    used=3, 00020
[  0] throws_throws_or_not-> throws_throws            
[  1] throws_throws_or_not-> 
constructor_modifiers:   used=2, 00021
[  0] constructor_modifiers-> <Ident,9>                
[  1] constructor_modifiers-> constructor_modifiers    <Ident,9>                
constructor_declarator:  used=1, 00022
[  0] constructor_declarator-> simple_type_name         <Separator,LeftBracket>  formal_parameter_list_or_not                      <Separator,RightBracket> 
formal_parameter_list_or_not:used=2, 00023
[  0] formal_parameter_list_or_not-> formal_parameter_list    
[  1] formal_parameter_list_or_not-> 
formal_parameter_list:   used=2, 00024
[  0] formal_parameter_list-> formal_parameter         
[  1] formal_parameter_list-> formal_parameter_list    <Separator,Comma>        formal_parameter         
formal_parameter:        used=3, 00025
[  0] formal_parameter   -> type                     variable_declarator_id   
throws_throws:           used=1, 00026
[  0] throws_throws      -> <Reserv,Throws>          class_type_list          
class_type_list:         used=2, 00027
[  0] class_type_list    -> <Ident,14>                
[  1] class_type_list    -> class_type_list          <Separator,Comma>        <Ident,14>                
constructor_body:        used=1, 00028
[  0] constructor_body   -> <Separator,LeftCramp>    explicit_constructor_invocation_or_not            block_statements_or_not  <Separator,RightCramp>   
explicit_constructor_invocation_or_not:used=1, 00029
[  0] explicit_constructor_invocation_or_not-> explicit_constructor_invocation                   
[  1] explicit_constructor_invocation_or_not-> 
block_statements_or_not: used=2, 00030
[  0] block_statements_or_not-> block_statements         
[  1] block_statements_or_not-> 
explicit_constructor_invocation:used=1, 00031
[  0] explicit_constructor_invocation-> <Reserv,This>            <Separator,LeftBracket>  argument_list_or_not     <Separator,RightBracket> 
[  1] explicit_constructor_invocation-> <Reserv,Super>           <Separator,LeftBracket>  argument_list_or_not     <Separator,RightBracket> 
argument_list_or_not:    used=6, 00032
[  0] argument_list_or_not-> argument_list            
[  1] argument_list_or_not-> 
field_declaration:       used=1, 00033
[  0] field_declaration  -> field_modifiers_or_not   type                     variable_declarators     <Separator,Semicolon>    
field_modifiers_or_not:  used=1, 00034
[  0] field_modifiers_or_not-> field_modifiers          
[  1] field_modifiers_or_not-> 
field_modifiers:         used=2, 00035
[  0] field_modifiers    -> <Ident,8>                
[  1] field_modifiers    -> field_modifiers          <Ident,8>                
variable_declarators:    used=3, 00036
[  0] variable_declarators-> variable_declarator      
[  1] variable_declarators-> variable_declarators     <Separator,Comma>        variable_declarator      
variable_declarator:     used=3, 00037
[  0] variable_declarator-> variable_declarator_id   
[  1] variable_declarator-> variable_declarator_id   <Oper,Assign>            variable_initializer     
variable_declarator_id:  used=4, 00038
[  0] variable_declarator_id-> identifier               
[  1] variable_declarator_id-> variable_declarator_id   <Separator,LeftScrape>   <Separator,RightScrape>  
variable_initializer:    used=3, 00039
[  0] variable_initializer-> expression               
[  1] variable_initializer-> array_initializer        
[  2] variable_initializer-> expression               
[  3] variable_initializer-> array_initializer        
method_declaration:      used=1, 00040
[  0] method_declaration -> method_header            method_body              
method_header:           used=1, 00041
[  0] method_header      -> method_modifiers_or_not  result_type              method_declarator        throws_throws_or_not     
method_modifiers_or_not: used=1, 00042
[  0] method_modifiers_or_not-> method_modifiers         
[  1] method_modifiers_or_not-> 
result_type:             used=2, 00043
[  0] result_type        -> type                     
[  1] result_type        -> <Reserv,Void>            
method_modifiers:        used=2, 00044
[  0] method_modifiers   -> <Ident,7>                
[  1] method_modifiers   -> method_modifiers         <Ident,7>                
method_declarator:       used=2, 00045
[  0] method_declarator  -> identifier               <Separator,LeftBracket>  formal_parameter_list_or_not                      <Separator,RightBracket> 
method_body:             used=1, 00046
[  0] method_body        -> block                    
[  1] method_body        -> <Separator,Semicolon>    
interface_declaration:   used=1, 00047
[  0] interface_declaration-> interface_modifiers_or_not                        <Reserv,Interface>       identifier               extends_interfaces_or_notinterface_body           
interface_modifiers_or_not:used=1, 00048
[  0] interface_modifiers_or_not-> interface_modifiers      
[  1] interface_modifiers_or_not-> 
extends_interfaces_or_not:used=1, 00049
[  0] extends_interfaces_or_not-> extends_interfaces       
[  1] extends_interfaces_or_not-> 
interface_modifiers:     used=2, 00050
[  0] interface_modifiers-> <Ident,12>                
[  1] interface_modifiers-> interface_modifiers      <Ident,12>                
extends_interfaces:      used=2, 00051
[  0] extends_interfaces -> <Reserv,Extends>         <Ident,15>                
[  1] extends_interfaces -> extends_interfaces       <Separator,Comma>        <Ident,15>                
interface_body:          used=1, 00052
[  0] interface_body     -> <Separator,LeftCramp>    interface_member_declarations_or_not              <Separator,RightCramp>   
interface_member_declarations_or_not:used=1, 00053
[  0] interface_member_declarations_or_not-> interface_member_declarations                     
[  1] interface_member_declarations_or_not-> 
interface_member_declarations:used=2, 00054
[  0] interface_member_declarations-> interface_member_declaration                      
[  1] interface_member_declarations-> interface_member_declarations                     interface_member_declaration                      
interface_member_declaration:used=2, 00055
[  0] interface_member_declaration-> constant_declaration     
[  1] interface_member_declaration-> abstract_method_declaration                       
constant_declaration:    used=1, 00056
[  0] constant_declaration-> <Ident,10>                type                     variable_declarator      
abstract_method_declaration:used=1, 00057
[  0] abstract_method_declaration-> abstract_method_modifiers_or_not                  result_type              method_declarator        throws_throws_or_not     <Separator,Semicolon>    
abstract_method_modifiers_or_not:used=1, 00058
[  0] abstract_method_modifiers_or_not-> abstract_method_modifiers
[  1] abstract_method_modifiers_or_not-> 
abstract_method_modifiers:used=2, 00059
[  0] abstract_method_modifiers-> <Ident,13>                
[  1] abstract_method_modifiers-> abstract_method_modifiers<Ident,13>                
array_initializer:       used=2, 00060
[  0] array_initializer  -> <Separator,LeftCramp>    variable_initializers_or_not                      array_initializer_comma_or_not                    <Separator,RightCramp>   
variable_initializers_or_not:used=1, 00061
[  0] variable_initializers_or_not-> variable_initializers    
[  1] variable_initializers_or_not-> 
array_initializer_comma_or_not:used=1, 00062
[  0] array_initializer_comma_or_not-> array_initializer_comma  
[  1] array_initializer_comma_or_not-> 
array_initializer_comma: used=1, 00063
[  0] array_initializer_comma-> <Separator,Comma>        
[  1] array_initializer_comma-> 
variable_initializers:   used=2, 00064
[  0] variable_initializers-> variable_initializer     
[  1] variable_initializers-> variable_initializers    <Separator,Comma>        variable_initializer     
type:                    used=6, 00065
[  0] type               -> <Ident,16>                
[  1] type               -> reference_type           <Ident,16>                
reference_type:          used=3, 00066
[  0] reference_type     -> class_or_interface_type  
[  1] reference_type     -> array_type               
class_or_interface_type: used=2, 00067
[  0] class_or_interface_type-> <Ident,14>                
[  1] class_or_interface_type-> <Ident,15>                
array_type:              used=1, 00068
[  0] array_type         -> type                     <Separator,LeftScrape>   <Separator,RightScrape>  
block:                   used=8, 00069
[  0] block              -> <Separator,LeftCramp>    block_statements_or_not  <Separator,RightCramp>   
block_statements:        used=3, 00070
[  0] block_statements   -> block_statement          
[  1] block_statements   -> block_statements         block_statement          
block_statement:         used=2, 00071
[  0] block_statement    -> local_variable_declaration_statement              
[  1] block_statement    -> statement                
local_variable_declaration_statement:used=1, 00072
[  0] local_variable_declaration_statement-> local_variable_declaration                        <Separator,Semicolon>    
local_variable_declaration:used=2, 00073
[  0] local_variable_declaration-> type                     variable_declarators     
statement:               used=7, 00074
[  0] statement          -> statement_without_trailing_substatement           
[  1] statement          -> labeled_statement        
[  2] statement          -> if_then_statement        
[  3] statement          -> if_then_else_statement   
[  4] statement          -> while_statement          
[  5] statement          -> for_statement            
statement_no_short_if:   used=6, 00075
[  0] statement_no_short_if-> statement_without_trailing_substatement           
[  1] statement_no_short_if-> labeled_statement_no_short_if                     
[  2] statement_no_short_if-> if_then_else_statement_no_short_if                
[  3] statement_no_short_if-> while_statement_no_short_if                       
[  4] statement_no_short_if-> for_statement_no_short_if
statement_without_trailing_substatement:used=2, 00076
[  0] statement_without_trailing_substatement-> block                    
[  1] statement_without_trailing_substatement-> empty_statement          
[  2] statement_without_trailing_substatement-> expression_statement     
[  3] statement_without_trailing_substatement-> switch_statement         
[  4] statement_without_trailing_substatement-> do_statement             
[  5] statement_without_trailing_substatement-> break_statement          
[  6] statement_without_trailing_substatement-> continue_statement       
[  7] statement_without_trailing_substatement-> return_statement         
[  8] statement_without_trailing_substatement-> synchronized_statement   
[  9] statement_without_trailing_substatement-> throws_statement         
[ 10] statement_without_trailing_substatement-> try_statement            
empty_statement:         used=1, 00077
[  0] empty_statement    -> <Separator,Semicolon>    
labeled_statement:       used=1, 00078
[  0] labeled_statement  -> identifier               <Separator,Colon>        statement                
labeled_statement_no_short_if:used=1, 00079
[  0] labeled_statement_no_short_if-> identifier               <Separator,Colon>        statement_no_short_if    
expression_statement:    used=1, 00080
[  0] expression_statement-> statement_expression     <Separator,Semicolon>    
statement_expression:    used=3, 00081
[  0] statement_expression-> assignment               
[  1] statement_expression-> preincrement_expression  
[  2] statement_expression-> postincrement_expression 
[  3] statement_expression-> predecrement_expression  
[  4] statement_expression-> postdecrement_expression 
[  5] statement_expression-> method_invocation        
[  6] statement_expression-> class_instance_creation_expression                
if_then_statement:       used=1, 00082
[  0] if_then_statement  -> <Reserv,If>              <Separator,LeftBracket>  expression               <Separator,RightBracket> statement                
if_then_else_statement:  used=1, 00083
[  0] if_then_else_statement-> <Reserv,If>              <Separator,LeftBracket>  expression               <Separator,RightBracket> statement_no_short_if    <Reserv,Else>            statement                
if_then_else_statement_no_short_if:used=1, 00084
[  0] if_then_else_statement_no_short_if-> <Reserv,If>              <Separator,LeftBracket>  expression               <Separator,RightBracket> statement_no_short_if    <Reserv,Else>            statement_no_short_if    
switch_statement:        used=1, 00085
[  0] switch_statement   -> <Reserv,Switch>          <Separator,LeftBracket>  expression               <Separator,RightBracket> switch_block             
switch_block:            used=1, 00086
[  0] switch_block       -> <Separator,LeftCramp>    switch_block_statement_groups_or_not              switch_labels_or_not     <Separator,RightCramp>   
switch_block_statement_groups_or_not:used=1, 00087
[  0] switch_block_statement_groups_or_not-> switch_block_statement_groups                     
[  1] switch_block_statement_groups_or_not-> 
switch_labels_or_not:    used=1, 00088
[  0] switch_labels_or_not-> switch_labels            
[  1] switch_labels_or_not-> 
switch_block_statement_groups:used=2, 00089
[  0] switch_block_statement_groups-> switch_block_statement_group                      
[  1] switch_block_statement_groups-> switch_block_statement_groups                     switch_block_statement_group                      
switch_block_statement_group:used=2, 00090
[  0] switch_block_statement_group-> switch_labels            block_statements         
switch_labels:           used=3, 00091
[  0] switch_labels      -> switch_label             
[  1] switch_labels      -> switch_labels            switch_label             
switch_label:            used=2, 00092
[  0] switch_label       -> <Reserv,Case>            constant_expression      <Separator,Colon>        
[  1] switch_label       -> <Reserv,Default>         <Separator,Colon>        
while_statement:         used=1, 00093
[  0] while_statement    -> <Reserv,While>           <Separator,LeftBracket>  expression               <Separator,RightBracket> statement                
while_statement_no_short_if:used=1, 00094
[  0] while_statement_no_short_if-> <Reserv,While>           <Separator,LeftBracket>  expression               <Separator,RightBracket> statement_no_short_if    
do_statement:            used=1, 00095
[  0] do_statement       -> <Reserv,Do>              statement                <Reserv,While>           <Separator,LeftBracket>  expression               <Separator,RightBracket> <Separator,Semicolon>    
for_statement:           used=1, 00096
[  0] for_statement      -> <Reserv,For>             <Separator,LeftBracket>  for_init_or_not          <Separator,Semicolon>    expression_or_not        <Separator,Semicolon>    for_update_or_not        <Separator,RightBracket> statement                
for_init_or_not:         used=2, 00097
[  0] for_init_or_not    -> for_init                 
[  1] for_init_or_not    -> 
expression_or_not:       used=3, 00098
[  0] expression_or_not  -> expression               
[  1] expression_or_not  -> 
for_update_or_not:       used=2, 00099
[  0] for_update_or_not  -> for_update               
[  1] for_update_or_not  -> 
for_statement_no_short_if:used=1, 00100
[  0] for_statement_no_short_if-> <Reserv,For>             <Separator,LeftBracket>  for_init_or_not          <Separator,Semicolon>    expression_or_not        <Separator,Semicolon>    for_update_or_not        <Separator,RightBracket> statement_no_short_if    
for_init:                used=1, 00101
[  0] for_init           -> statement_expression_list
[  1] for_init           -> local_variable_declaration                        
for_update:              used=1, 00102
[  0] for_update         -> statement_expression_list
statement_expression_list:used=3, 00103
[  0] statement_expression_list-> statement_expression     
[  1] statement_expression_list-> statement_expression_list<Separator,Comma>        statement_expression     
break_statement:         used=1, 00104
[  0] break_statement    -> <Reserv,Break>           identifier_or_not        <Separator,Semicolon>    
identifier_or_not:       used=2, 00105
[  0] identifier_or_not  -> identifier               
[  1] identifier_or_not  -> 
continue_statement:      used=1, 00106
[  0] continue_statement -> <Reserv,Continue>        identifier_or_not        <Separator,Semicolon>    
return_statement:        used=1, 00107
[  0] return_statement   -> <Reserv,Return>          expression_or_not        <Separator,Semicolon>    
throws_statement:        used=1, 00108
[  0] throws_statement   -> <Reserv,Throw>           expression               <Separator,Semicolon>    
synchronized_statement:  used=1, 00109
[  0] synchronized_statement-> <Reserv,Synchronized>    <Separator,LeftBracket>  expression               <Separator,RightBracket> block                    
try_statement:           used=1, 00110
[  0] try_statement      -> <Reserv,Try>             block                    catches                  
[  1] try_statement      -> <Reserv,Try>             block                    catches_or_not           finally_finally          
catches_or_not:          used=1, 00111
[  0] catches_or_not     -> catches                  
[  1] catches_or_not     -> 
catches:                 used=3, 00112
[  0] catches            -> catch_clause             
[  1] catches            -> catches                  catch_clause             
catch_clause:            used=2, 00113
[  0] catch_clause       -> <Reserv,Catch>           <Separator,LeftBracket>  formal_parameter         <Separator,RightBracket> block                    
finally_finally:         used=1, 00114
[  0] finally_finally    -> <Reserv,Finally>         block                    
constant_expression:     used=1, 00115
[  0] constant_expression-> expression               
expression:              used=20, 00116
[  0] expression         -> assignment_expression    
assignment_expression:   used=2, 00117
[  0] assignment_expression-> conditional_expression   
[  1] assignment_expression-> assignment               
assignment:              used=2, 00118
[  0] assignment         -> left_hand_side           assignment_operator      assignment_expression    
left_hand_side:          used=1, 00119
[  0] left_hand_side     -> expression_name          
[  1] left_hand_side     -> field_access             
[  2] left_hand_side     -> array_access             
assignment_operator:     used=1, 00120
[  0] assignment_operator-> <Oper,Assign>            
[  1] assignment_operator-> <Oper,MultiAssign>       
[  2] assignment_operator-> <Oper,DivAssign>         
[  3] assignment_operator-> <Oper,ModAssign>         
[  4] assignment_operator-> <Oper,AddAssign>         
[  5] assignment_operator-> <Oper,SubAssign>         
[  6] assignment_operator-> <Oper,LShiftAssign>      
[  7] assignment_operator-> <Oper,RShiftAssign>      
[  8] assignment_operator-> <Oper,RZShiftAssign>     
[  9] assignment_operator-> <Oper,AndAssign>         
[ 10] assignment_operator-> <Oper,XOrAssign>         
[ 11] assignment_operator-> <Oper,OrAssign>          
conditional_expression:  used=2, 00121
[  0] conditional_expression-> conditional_or_expression
[  1] conditional_expression-> conditional_or_expression<Oper,Question>          expression               <Separator,Colon>        conditional_expression   
conditional_or_expression:used=3, 00122
[  0] conditional_or_expression-> conditional_and_expression                        
[  1] conditional_or_expression-> conditional_or_expression<Oper,OrOr>              conditional_and_expression                        
conditional_and_expression:used=3, 00123
[  0] conditional_and_expression-> inclusive_or_expression  
[  1] conditional_and_expression-> conditional_and_expression                        <Oper,AndAnd>            inclusive_or_expression  
inclusive_or_expression: used=3, 00124
[  0] inclusive_or_expression-> exclusive_or_expression  
[  1] inclusive_or_expression-> inclusive_or_expression  <Oper,Or>                exclusive_or_expression  
exclusive_or_expression: used=3, 00125
[  0] exclusive_or_expression-> and_expression           
[  1] exclusive_or_expression-> exclusive_or_expression  <Oper,XOr>               and_expression           
and_expression:          used=3, 00126
[  0] and_expression     -> equality_expression      
[  1] and_expression     -> and_expression           <Oper,And>               equality_expression      
equality_expression:     used=4, 00127
[  0] equality_expression-> relational_expression    
[  1] equality_expression-> equality_expression      <Oper,Equ>               relational_expression    
[  2] equality_expression-> equality_expression      <Oper,NotEqu>            relational_expression    
relational_expression:   used=8, 00128
[  0] relational_expression-> shift_expression         
[  1] relational_expression-> relational_expression    <Oper,LT>                shift_expression         
[  2] relational_expression-> relational_expression    <Oper,GT>                shift_expression         
[  3] relational_expression-> relational_expression    <Oper,LE>                shift_expression         
[  4] relational_expression-> relational_expression    <Oper,GE>                shift_expression         
[  5] relational_expression-> relational_expression    <Reserv,Instanceof>      reference_type           
shift_expression:        used=8, 00129
[  0] shift_expression   -> additive_expression      
[  1] shift_expression   -> shift_expression         <Oper,LShift>            additive_expression      
[  2] shift_expression   -> shift_expression         <Oper,RShift>            additive_expression      
[  3] shift_expression   -> shift_expression         <Oper,RZShift>           additive_expression      
additive_expression:     used=6, 00130
[  0] additive_expression-> multiplicative_expression
[  1] additive_expression-> additive_expression      <Oper,Add>               multiplicative_expression
[  2] additive_expression-> additive_expression      <Oper,Sub>               multiplicative_expression
multiplicative_expression:used=6, 00131
[  0] multiplicative_expression-> unary_expression         
[  1] multiplicative_expression-> multiplicative_expression<Oper,Multi>             unary_expression         
[  2] multiplicative_expression-> multiplicative_expression<Oper,Div>               unary_expression         
[  3] multiplicative_expression-> multiplicative_expression<Oper,Mod>               unary_expression         
cast_expression:         used=1, 00132
[  0] cast_expression    -> <Separator,LeftBracket>  <Ident,16>                <Separator,RightBracket> unary_expression         
[  1] cast_expression    -> <Separator,LeftBracket>  reference_type           <Separator,RightBracket> unary_expression_not_plus_minus                   
unary_expression:        used=11, 00133
[  0] unary_expression   -> preincrement_expression  
[  1] unary_expression   -> predecrement_expression  
[  2] unary_expression   -> <Oper,Add>               unary_expression         
[  3] unary_expression   -> <Oper,Sub>               unary_expression         
[  4] unary_expression   -> unary_expression_not_plus_minus                   
predecrement_expression: used=2, 00134
[  0] predecrement_expression-> <Oper,MinusMinus>        unary_expression         
preincrement_expression: used=2, 00135
[  0] preincrement_expression-> <Oper,PlusPlus>          unary_expression         
unary_expression_not_plus_minus:used=2, 00136
[  0] unary_expression_not_plus_minus-> postfix_expression       
[  1] unary_expression_not_plus_minus-> <Oper,Tilda>             unary_expression         
[  2] unary_expression_not_plus_minus-> <Oper,Not>               unary_expression         
[  3] unary_expression_not_plus_minus-> cast_expression          
postdecrement_expression:used=2, 00137
[  0] postdecrement_expression-> postfix_expression       <Oper,MinusMinus>        
postincrement_expression:used=2, 00138
[  0] postincrement_expression-> postfix_expression       <Oper,PlusPlus>          
postfix_expression:      used=3, 00139
[  0] postfix_expression -> primary                  
[  1] postfix_expression -> expression_name          
[  2] postfix_expression -> postincrement_expression 
[  3] postfix_expression -> postdecrement_expression 
method_invocation:       used=2, 00140
[  0] method_invocation  -> method_name              <Separator,LeftBracket>  argument_list_or_not     <Separator,RightBracket> 
[  1] method_invocation  -> primary                  <Separator,Point>        identifier               <Separator,LeftBracket>  argument_list_or_not     <Separator,RightBracket> 
[  2] method_invocation  -> <Reserv,Super>           <Separator,Point>        identifier               <Separator,LeftBracket>  argument_list_or_not     <Separator,RightBracket> 
field_access:            used=2, 00141
[  0] field_access       -> primary                  <Separator,Point>        identifier               
[  1] field_access       -> <Reserv,Super>           <Separator,Point>        identifier               
primary:                 used=3, 00142
[  0] primary            -> primary_no_new_array     
[  1] primary            -> array_creation_expression
primary_no_new_array:    used=2, 00143
[  0] primary_no_new_array-> literal                  
[  1] primary_no_new_array-> <Reserv,This>            
[  2] primary_no_new_array-> <Separator,LeftBracket>  expression               <Separator,RightBracket> 
[  3] primary_no_new_array-> class_instance_creation_expression                
[  4] primary_no_new_array-> field_access             
[  5] primary_no_new_array-> method_invocation        
[  6] primary_no_new_array-> array_access             
class_instance_creation_expression:used=2, 00144
[  0] class_instance_creation_expression-> <Reserv,New>             <Ident,14>                <Separator,LeftBracket>  argument_list_or_not     <Separator,RightBracket> 
argument_list:           used=2, 00145
[  0] argument_list      -> expression               
[  1] argument_list      -> argument_list            <Separator,Comma>        expression               
array_creation_expression:used=1, 00146
[  0] array_creation_expression-> <Reserv,New>             <Ident,16>                dim_exprs                dims_or_not              
[  1] array_creation_expression-> <Reserv,New>             class_or_interface_type  dim_exprs                dims_or_not              
dims_or_not:             used=2, 00147
[  0] dims_or_not        -> dims                     
[  1] dims_or_not        -> 
dim_exprs:               used=3, 00148
[  0] dim_exprs          -> dim_expr                 
[  1] dim_exprs          -> dim_exprs                dim_expr                 
dim_expr:                used=2, 00149
[  0] dim_expr           -> <Separator,LeftScrape>   expression               <Separator,RightScrape>  
dims:                    used=2, 00150
[  0] dims               -> <Separator,LeftScrape>   <Separator,RightScrape>  
[  1] dims               -> dims                     <Separator,LeftScrape>   <Separator,RightScrape>  
array_access:            used=2, 00151
[  0] array_access       -> expression_name          <Separator,LeftScrape>   expression               <Separator,RightScrape>  
[  1] array_access       -> primary_no_new_array     <Separator,LeftScrape>   expression               <Separator,RightScrape>  
expression_name:         used=3, 00152
[  0] expression_name    -> <Ident,5>                
method_name:             used=1, 00153
[  0] method_name        -> <Ident,6>                
identifier:              used=11, 00154
[  0] identifier         -> <Ident>                  
simple_type_name:        used=1, 00155
[  0] simple_type_name   -> <Ident,1>                
literal:                 used=1, 00156
[  0] literal            -> <Integer>                
[  1] literal            -> <Number>                 
[  2] literal            -> <Reserv,Null>            
