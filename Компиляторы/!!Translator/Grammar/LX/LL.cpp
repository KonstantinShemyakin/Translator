
void make_cells(TGrammar& grammar)
{
static const int A[][15] = {
{1,0,0,0,0,3,2,45,0,0,2,0,0,0,0},
{1,0,0,0,0,3,12,3,0,0,2,0,0,0,0},
{1,0,0,0,0,3,12,4,0,0,2,0,0,0,0},
{1,0,0,0,0,3,12,5,0,0,2,0,0,0,0},
{1,0,0,0,0,6,0,0,0,0,2,0,0,0,0},
{1,1,0,0,0,3,2,45,0,0,2,1,0,1,0},
{1,1,0,0,0,3,12,3,0,0,2,1,0,1,0},
{1,1,0,0,0,3,12,4,0,0,2,1,0,1,0},
{1,1,0,0,0,3,12,5,0,0,2,1,0,1,0},
{1,1,0,0,0,6,0,0,0,0,2,1,0,1,0},
{1,2,0,0,0,3,2,45,0,0,2,2,0,2,0},
{1,2,0,0,0,3,12,3,0,0,2,2,0,2,0},
{1,2,0,0,0,3,12,4,0,0,2,2,0,2,0},
{1,2,0,0,0,3,12,5,0,0,2,2,0,2,0},
{1,3,0,0,0,3,2,45,0,0,2,3,0,3,0},
{1,3,0,0,0,3,12,3,0,0,2,3,1,4,0},
{1,3,0,0,0,3,12,4,0,0,2,3,2,5,0},
{1,3,0,0,0,3,12,5,0,0,2,3,2,5,0},
{1,4,0,0,0,3,2,36,0,0,2,4,1,7,0},
{1,4,0,0,0,3,12,11,0,0,2,4,0,6,0},
{1,5,0,0,0,3,2,44,0,0,2,5,0,8,0},
{1,6,0,0,0,3,2,37,0,0,2,6,1,10,0},
{1,6,0,0,0,3,2,44,0,0,2,6,0,9,0},
{1,7,0,0,0,3,2,34,0,0,2,7,2,13,0},
{1,7,0,0,0,3,2,45,0,0,2,7,0,11,0},
{1,7,0,0,0,3,12,10,0,0,2,7,1,12,0},
{1,8,0,0,0,3,2,45,0,0,2,8,0,14,0},
{1,8,0,0,0,3,12,3,0,0,2,8,0,14,0},
{1,8,0,0,0,3,12,4,0,0,2,8,0,14,0},
{1,8,0,0,0,3,12,5,0,0,2,8,0,14,0},
{1,8,0,0,0,6,0,0,0,0,2,8,1,15,0},
{1,9,0,0,0,3,1,14,0,0,2,9,0,16,0},
{1,9,0,0,0,3,2,37,0,0,2,9,1,17,0},
{1,9,0,0,0,3,2,44,0,0,2,9,1,17,0},
{1,10,0,0,0,3,12,4,0,0,2,10,0,18,0},
{1,10,0,0,0,3,12,5,0,0,2,10,0,18,0},
{1,11,0,0,0,3,12,4,0,0,2,11,0,19,0},
{1,11,0,0,0,3,12,5,0,0,2,11,1,20,0},
{1,12,0,0,0,3,2,34,0,0,2,12,1,22,0},
{1,12,0,0,0,3,12,10,0,0,2,12,0,21,0},
{1,13,0,0,0,3,2,44,0,0,2,13,0,23,0},
{1,14,0,0,0,3,2,35,0,0,2,14,1,25,0},
{1,14,0,0,0,3,2,44,0,0,2,14,0,24,0},
{1,15,0,0,0,3,2,34,0,0,2,15,0,26,0},
{1,15,0,0,0,3,2,36,0,0,2,15,1,27,0},
{1,15,0,0,0,3,3,0,0,0,2,15,1,27,0},
{1,15,0,0,0,3,4,0,0,0,2,15,1,27,0},
{1,15,0,0,0,3,6,0,0,0,2,15,1,27,0},
{1,15,0,0,0,3,11,11,0,0,2,15,1,27,0},
{1,15,0,0,0,3,11,13,0,0,2,15,1,27,0},
{1,15,0,0,0,3,11,14,0,0,2,15,1,27,0},
{1,15,0,0,0,3,12,1,0,0,2,15,1,27,0},
{1,15,0,0,0,3,12,2,0,0,2,15,1,27,0},
{1,15,0,0,0,3,12,8,0,0,2,15,1,27,0},
{1,15,0,0,0,3,12,9,0,0,2,15,1,27,0},
{1,15,0,0,0,3,12,10,0,0,2,15,0,26,0},
{1,16,0,0,0,3,2,38,0,0,2,16,0,28,0},
{1,16,0,0,0,3,12,12,0,0,2,16,0,28,0},
{1,17,0,0,0,3,2,38,0,0,2,17,1,30,0},
{1,17,0,0,0,3,12,12,0,0,2,17,0,29,0},
{1,18,0,0,0,3,2,38,0,0,2,18,0,31,0},
{1,19,0,0,0,3,1,14,0,0,2,19,1,33,0},
{1,19,0,0,0,3,2,37,0,0,2,19,1,33,0},
{1,19,0,0,0,3,2,38,0,0,2,19,0,32,0},
{1,19,0,0,0,3,2,44,0,0,2,19,1,33,0},
{1,19,0,0,0,3,2,45,0,0,2,19,1,33,0},
{1,20,0,0,0,3,6,0,0,0,2,20,0,34,0},
{1,21,0,0,0,3,1,14,0,0,2,21,0,35,0},
{1,21,0,0,0,3,2,37,0,0,2,21,1,36,0},
{1,21,0,0,0,3,2,44,0,0,2,21,1,36,0},
{1,21,0,0,0,3,2,45,0,0,2,21,1,36,0},
{1,22,0,0,0,3,6,0,0,0,2,22,1,38,0},
{1,22,0,0,0,3,12,2,0,0,2,22,0,37,0},
{1,23,0,0,0,3,1,14,0,0,2,23,0,39,0},
{1,23,0,0,0,3,2,44,0,0,2,23,1,40,0},
{1,23,0,0,0,3,2,45,0,0,2,23,1,40,0},
{1,24,0,0,0,3,6,0,0,0,2,24,1,42,0},
{1,24,0,0,0,3,11,7,0,0,2,24,0,41,0},
{1,24,0,0,0,3,12,2,0,0,2,24,1,42,0},
{1,25,0,0,0,3,2,36,0,0,2,25,1,44,0},
{1,25,0,0,0,3,3,0,0,0,2,25,1,44,0},
{1,25,0,0,0,3,4,0,0,0,2,25,1,44,0},
{1,25,0,0,0,3,6,0,0,0,2,25,1,44,0},
{1,25,0,0,0,3,11,11,0,0,2,25,1,44,0},
{1,25,0,0,0,3,11,13,0,0,2,25,1,44,0},
{1,25,0,0,0,3,11,14,0,0,2,25,1,44,0},
{1,25,0,0,0,3,12,1,0,0,2,25,1,44,0},
{1,25,0,0,0,3,12,2,0,0,2,25,1,44,0},
{1,25,0,0,0,3,12,5,0,0,2,25,0,43,0},
{1,25,0,0,0,3,12,8,0,0,2,25,1,44,0},
{1,25,0,0,0,3,12,9,0,0,2,25,1,44,0},
{1,26,0,0,0,3,6,0,0,0,2,26,1,46,0},
{1,26,0,0,0,3,11,7,0,0,2,26,0,45,0},
{1,27,0,0,0,3,2,36,0,0,2,27,0,47,0},
{1,27,0,0,0,3,3,0,0,0,2,27,0,47,0},
{1,27,0,0,0,3,4,0,0,0,2,27,0,47,0},
{1,27,0,0,0,3,6,0,0,0,2,27,0,47,0},
{1,27,0,0,0,3,11,11,0,0,2,27,0,47,0},
{1,27,0,0,0,3,11,13,0,0,2,27,0,47,0},
{1,27,0,0,0,3,11,14,0,0,2,27,0,47,0},
{1,27,0,0,0,3,12,1,0,0,2,27,0,47,0},
{1,27,0,0,0,3,12,2,0,0,2,27,0,47,0},
{1,27,0,0,0,3,12,8,0,0,2,27,0,47,0},
{1,27,0,0,0,3,12,9,0,0,2,27,0,47,0},
{1,28,0,0,0,3,2,44,0,0,2,28,0,48,0},
{1,29,0,0,0,3,2,37,0,0,2,29,1,50,0},
{1,29,0,0,0,3,2,39,0,0,2,29,1,50,0},
{1,29,0,0,0,3,2,44,0,0,2,29,0,49,0},
{1,29,0,0,0,3,2,45,0,0,2,29,1,50,0},
{1,29,0,0,0,3,2,46,0,0,2,29,1,50,0},
{1,30,0,0,0,3,2,36,0,0,2,30,0,51,0},
{1,30,0,0,0,3,3,0,0,0,2,30,0,51,0},
{1,30,0,0,0,3,4,0,0,0,2,30,0,51,0},
{1,30,0,0,0,3,6,0,0,0,2,30,0,51,0},
{1,30,0,0,0,3,11,11,0,0,2,30,0,51,0},
{1,30,0,0,0,3,11,13,0,0,2,30,0,51,0},
{1,30,0,0,0,3,11,14,0,0,2,30,0,51,0},
{1,30,0,0,0,3,12,1,0,0,2,30,0,51,0},
{1,30,0,0,0,3,12,2,0,0,2,30,0,51,0},
{1,30,0,0,0,3,12,8,0,0,2,30,0,51,0},
{1,30,0,0,0,3,12,9,0,0,2,30,0,51,0},
{1,31,0,0,0,3,2,35,0,0,2,31,1,53,0},
{1,31,0,0,0,3,2,37,0,0,2,31,1,53,0},
{1,31,0,0,0,3,2,39,0,0,2,31,1,53,0},
{1,31,0,0,0,3,2,44,0,0,2,31,1,53,0},
{1,31,0,0,0,3,2,45,0,0,2,31,1,53,0},
{1,31,0,0,0,3,2,46,0,0,2,31,1,53,0},
{1,31,0,0,0,3,11,1,0,0,2,31,0,52,0},
{1,32,0,0,0,3,2,36,0,0,2,32,0,54,0},
{1,32,0,0,0,3,3,0,0,0,2,32,0,54,0},
{1,32,0,0,0,3,4,0,0,0,2,32,0,54,0},
{1,32,0,0,0,3,6,0,0,0,2,32,0,54,0},
{1,32,0,0,0,3,11,11,0,0,2,32,0,54,0},
{1,32,0,0,0,3,11,13,0,0,2,32,0,54,0},
{1,32,0,0,0,3,11,14,0,0,2,32,0,54,0},
{1,32,0,0,0,3,12,1,0,0,2,32,0,54,0},
{1,32,0,0,0,3,12,2,0,0,2,32,0,54,0},
{1,32,0,0,0,3,12,8,0,0,2,32,0,54,0},
{1,32,0,0,0,3,12,9,0,0,2,32,0,54,0},
{1,33,0,0,0,3,11,3,0,0,2,33,0,55,0},
{1,34,0,0,0,3,2,35,0,0,2,34,1,57,0},
{1,34,0,0,0,3,2,37,0,0,2,34,1,57,0},
{1,34,0,0,0,3,2,39,0,0,2,34,1,57,0},
{1,34,0,0,0,3,2,44,0,0,2,34,1,57,0},
{1,34,0,0,0,3,2,45,0,0,2,34,1,57,0},
{1,34,0,0,0,3,2,46,0,0,2,34,1,57,0},
{1,34,0,0,0,3,11,1,0,0,2,34,1,57,0},
{1,34,0,0,0,3,11,2,0,0,2,34,1,57,0},
{1,34,0,0,0,3,11,3,0,0,2,34,0,56,0},
{1,35,0,0,0,3,2,35,0,0,2,35,1,59,0},
{1,35,0,0,0,3,2,37,0,0,2,35,1,59,0},
{1,35,0,0,0,3,2,39,0,0,2,35,1,59,0},
{1,35,0,0,0,3,2,44,0,0,2,35,1,59,0},
{1,35,0,0,0,3,2,45,0,0,2,35,1,59,0},
{1,35,0,0,0,3,2,46,0,0,2,35,1,59,0},
{1,35,0,0,0,3,11,1,0,0,2,35,1,59,0},
{1,35,0,0,0,3,11,2,0,0,2,35,0,58,0},
{1,36,0,0,0,3,2,36,0,0,2,36,0,60,0},
{1,36,0,0,0,3,3,0,0,0,2,36,0,60,0},
{1,36,0,0,0,3,4,0,0,0,2,36,0,60,0},
{1,36,0,0,0,3,6,0,0,0,2,36,0,60,0},
{1,36,0,0,0,3,11,11,0,0,2,36,0,60,0},
{1,36,0,0,0,3,11,13,0,0,2,36,0,60,0},
{1,36,0,0,0,3,11,14,0,0,2,36,0,60,0},
{1,36,0,0,0,3,12,1,0,0,2,36,0,60,0},
{1,36,0,0,0,3,12,2,0,0,2,36,0,60,0},
{1,36,0,0,0,3,12,8,0,0,2,36,0,60,0},
{1,36,0,0,0,3,12,9,0,0,2,36,0,60,0},
{1,37,0,0,0,3,11,4,0,0,2,37,0,61,0},
{1,38,0,0,0,3,2,35,0,0,2,38,1,63,0},
{1,38,0,0,0,3,2,37,0,0,2,38,1,63,0},
{1,38,0,0,0,3,2,39,0,0,2,38,1,63,0},
{1,38,0,0,0,3,2,44,0,0,2,38,1,63,0},
{1,38,0,0,0,3,2,45,0,0,2,38,1,63,0},
{1,38,0,0,0,3,2,46,0,0,2,38,1,63,0},
{1,38,0,0,0,3,11,1,0,0,2,38,1,63,0},
{1,38,0,0,0,3,11,2,0,0,2,38,1,63,0},
{1,38,0,0,0,3,11,3,0,0,2,38,1,63,0},
{1,38,0,0,0,3,11,4,0,0,2,38,0,62,0},
{1,39,0,0,0,3,2,36,0,0,2,39,0,64,0},
{1,39,0,0,0,3,3,0,0,0,2,39,0,64,0},
{1,39,0,0,0,3,4,0,0,0,2,39,0,64,0},
{1,39,0,0,0,3,6,0,0,0,2,39,0,64,0},
{1,39,0,0,0,3,11,11,0,0,2,39,0,64,0},
{1,39,0,0,0,3,11,13,0,0,2,39,0,64,0},
{1,39,0,0,0,3,11,14,0,0,2,39,0,64,0},
{1,39,0,0,0,3,12,1,0,0,2,39,0,64,0},
{1,39,0,0,0,3,12,2,0,0,2,39,0,64,0},
{1,39,0,0,0,3,12,8,0,0,2,39,0,64,0},
{1,39,0,0,0,3,12,9,0,0,2,39,0,64,0},
{1,40,0,0,0,3,11,5,0,0,2,40,0,65,0},
{1,41,0,0,0,3,2,35,0,0,2,41,1,67,0},
{1,41,0,0,0,3,2,37,0,0,2,41,1,67,0},
{1,41,0,0,0,3,2,39,0,0,2,41,1,67,0},
{1,41,0,0,0,3,2,44,0,0,2,41,1,67,0},
{1,41,0,0,0,3,2,45,0,0,2,41,1,67,0},
{1,41,0,0,0,3,2,46,0,0,2,41,1,67,0},
{1,41,0,0,0,3,11,1,0,0,2,41,1,67,0},
{1,41,0,0,0,3,11,2,0,0,2,41,1,67,0},
{1,41,0,0,0,3,11,3,0,0,2,41,1,67,0},
{1,41,0,0,0,3,11,4,0,0,2,41,1,67,0},
{1,41,0,0,0,3,11,5,0,0,2,41,0,66,0},
{1,42,0,0,0,3,2,36,0,0,2,42,0,68,0},
{1,42,0,0,0,3,3,0,0,0,2,42,0,68,0},
{1,42,0,0,0,3,4,0,0,0,2,42,0,68,0},
{1,42,0,0,0,3,6,0,0,0,2,42,0,68,0},
{1,42,0,0,0,3,11,11,0,0,2,42,0,68,0},
{1,42,0,0,0,3,11,13,0,0,2,42,0,68,0},
{1,42,0,0,0,3,11,14,0,0,2,42,0,68,0},
{1,42,0,0,0,3,12,1,0,0,2,42,0,68,0},
{1,42,0,0,0,3,12,2,0,0,2,42,0,68,0},
{1,42,0,0,0,3,12,8,0,0,2,42,0,68,0},
{1,42,0,0,0,3,12,9,0,0,2,42,0,68,0},
{1,43,0,0,0,3,11,6,0,0,2,43,0,69,0},
{1,44,0,0,0,3,2,35,0,0,2,44,1,71,0},
{1,44,0,0,0,3,2,37,0,0,2,44,1,71,0},
{1,44,0,0,0,3,2,39,0,0,2,44,1,71,0},
{1,44,0,0,0,3,2,44,0,0,2,44,1,71,0},
{1,44,0,0,0,3,2,45,0,0,2,44,1,71,0},
{1,44,0,0,0,3,2,46,0,0,2,44,1,71,0},
{1,44,0,0,0,3,11,1,0,0,2,44,1,71,0},
{1,44,0,0,0,3,11,2,0,0,2,44,1,71,0},
{1,44,0,0,0,3,11,3,0,0,2,44,1,71,0},
{1,44,0,0,0,3,11,4,0,0,2,44,1,71,0},
{1,44,0,0,0,3,11,5,0,0,2,44,1,71,0},
{1,44,0,0,0,3,11,6,0,0,2,44,0,70,0},
{1,45,0,0,0,3,2,36,0,0,2,45,0,72,0},
{1,45,0,0,0,3,3,0,0,0,2,45,0,72,0},
{1,45,0,0,0,3,4,0,0,0,2,45,0,72,0},
{1,45,0,0,0,3,6,0,0,0,2,45,0,72,0},
{1,45,0,0,0,3,11,11,0,0,2,45,0,72,0},
{1,45,0,0,0,3,11,13,0,0,2,45,0,72,0},
{1,45,0,0,0,3,11,14,0,0,2,45,0,72,0},
{1,45,0,0,0,3,12,1,0,0,2,45,0,72,0},
{1,45,0,0,0,3,12,2,0,0,2,45,0,72,0},
{1,45,0,0,0,3,12,8,0,0,2,45,0,72,0},
{1,45,0,0,0,3,12,9,0,0,2,45,0,72,0},
{1,46,0,0,0,3,11,7,0,0,2,46,0,73,0},
{1,47,0,0,0,3,2,35,0,0,2,47,1,75,0},
{1,47,0,0,0,3,2,37,0,0,2,47,1,75,0},
{1,47,0,0,0,3,2,39,0,0,2,47,1,75,0},
{1,47,0,0,0,3,2,44,0,0,2,47,1,75,0},
{1,47,0,0,0,3,2,45,0,0,2,47,1,75,0},
{1,47,0,0,0,3,2,46,0,0,2,47,1,75,0},
{1,47,0,0,0,3,11,1,0,0,2,47,1,75,0},
{1,47,0,0,0,3,11,2,0,0,2,47,1,75,0},
{1,47,0,0,0,3,11,3,0,0,2,47,1,75,0},
{1,47,0,0,0,3,11,4,0,0,2,47,1,75,0},
{1,47,0,0,0,3,11,5,0,0,2,47,1,75,0},
{1,47,0,0,0,3,11,6,0,0,2,47,1,75,0},
{1,47,0,0,0,3,11,7,0,0,2,47,0,74,0},
{1,48,0,0,0,3,2,36,0,0,2,48,0,76,0},
{1,48,0,0,0,3,3,0,0,0,2,48,0,76,0},
{1,48,0,0,0,3,4,0,0,0,2,48,0,76,0},
{1,48,0,0,0,3,6,0,0,0,2,48,0,76,0},
{1,48,0,0,0,3,11,11,0,0,2,48,0,76,0},
{1,48,0,0,0,3,11,13,0,0,2,48,0,76,0},
{1,48,0,0,0,3,11,14,0,0,2,48,0,76,0},
{1,48,0,0,0,3,12,1,0,0,2,48,0,76,0},
{1,48,0,0,0,3,12,2,0,0,2,48,0,76,0},
{1,48,0,0,0,3,12,8,0,0,2,48,0,76,0},
{1,48,0,0,0,3,12,9,0,0,2,48,0,76,0},
{1,49,0,0,0,3,11,8,0,0,2,49,0,77,0},
{1,50,0,0,0,3,2,35,0,0,2,50,1,79,0},
{1,50,0,0,0,3,2,37,0,0,2,50,1,79,0},
{1,50,0,0,0,3,2,39,0,0,2,50,1,79,0},
{1,50,0,0,0,3,2,44,0,0,2,50,1,79,0},
{1,50,0,0,0,3,2,45,0,0,2,50,1,79,0},
{1,50,0,0,0,3,2,46,0,0,2,50,1,79,0},
{1,50,0,0,0,3,11,1,0,0,2,50,1,79,0},
{1,50,0,0,0,3,11,2,0,0,2,50,1,79,0},
{1,50,0,0,0,3,11,3,0,0,2,50,1,79,0},
{1,50,0,0,0,3,11,4,0,0,2,50,1,79,0},
{1,50,0,0,0,3,11,5,0,0,2,50,1,79,0},
{1,50,0,0,0,3,11,6,0,0,2,50,1,79,0},
{1,50,0,0,0,3,11,7,0,0,2,50,1,79,0},
{1,50,0,0,0,3,11,8,0,0,2,50,0,78,0},
{1,51,0,0,0,3,2,36,0,0,2,51,0,80,0},
{1,51,0,0,0,3,3,0,0,0,2,51,0,80,0},
{1,51,0,0,0,3,4,0,0,0,2,51,0,80,0},
{1,51,0,0,0,3,6,0,0,0,2,51,0,80,0},
{1,51,0,0,0,3,11,11,0,0,2,51,0,80,0},
{1,51,0,0,0,3,11,13,0,0,2,51,0,80,0},
{1,51,0,0,0,3,11,14,0,0,2,51,0,80,0},
{1,51,0,0,0,3,12,1,0,0,2,51,0,80,0},
{1,51,0,0,0,3,12,2,0,0,2,51,0,80,0},
{1,51,0,0,0,3,12,8,0,0,2,51,0,80,0},
{1,51,0,0,0,3,12,9,0,0,2,51,0,80,0},
{1,52,0,0,0,3,11,9,0,0,2,52,0,81,0},
{1,53,0,0,0,3,2,35,0,0,2,53,1,83,0},
{1,53,0,0,0,3,2,37,0,0,2,53,1,83,0},
{1,53,0,0,0,3,2,39,0,0,2,53,1,83,0},
{1,53,0,0,0,3,2,44,0,0,2,53,1,83,0},
{1,53,0,0,0,3,2,45,0,0,2,53,1,83,0},
{1,53,0,0,0,3,2,46,0,0,2,53,1,83,0},
{1,53,0,0,0,3,11,1,0,0,2,53,1,83,0},
{1,53,0,0,0,3,11,2,0,0,2,53,1,83,0},
{1,53,0,0,0,3,11,3,0,0,2,53,1,83,0},
{1,53,0,0,0,3,11,4,0,0,2,53,1,83,0},
{1,53,0,0,0,3,11,5,0,0,2,53,1,83,0},
{1,53,0,0,0,3,11,6,0,0,2,53,1,83,0},
{1,53,0,0,0,3,11,7,0,0,2,53,1,83,0},
{1,53,0,0,0,3,11,8,0,0,2,53,1,83,0},
{1,53,0,0,0,3,11,9,0,0,2,53,0,82,0},
{1,54,0,0,0,3,2,36,0,0,2,54,0,84,0},
{1,54,0,0,0,3,3,0,0,0,2,54,0,84,0},
{1,54,0,0,0,3,4,0,0,0,2,54,0,84,0},
{1,54,0,0,0,3,6,0,0,0,2,54,0,84,0},
{1,54,0,0,0,3,11,11,0,0,2,54,0,84,0},
{1,54,0,0,0,3,11,13,0,0,2,54,0,84,0},
{1,54,0,0,0,3,11,14,0,0,2,54,0,84,0},
{1,54,0,0,0,3,12,1,0,0,2,54,0,84,0},
{1,54,0,0,0,3,12,2,0,0,2,54,0,84,0},
{1,54,0,0,0,3,12,8,0,0,2,54,0,84,0},
{1,54,0,0,0,3,12,9,0,0,2,54,0,84,0},
{1,55,0,0,0,3,11,10,0,0,2,55,0,85,0},
{1,56,0,0,0,3,2,35,0,0,2,56,1,87,0},
{1,56,0,0,0,3,2,37,0,0,2,56,1,87,0},
{1,56,0,0,0,3,2,39,0,0,2,56,1,87,0},
{1,56,0,0,0,3,2,44,0,0,2,56,1,87,0},
{1,56,0,0,0,3,2,45,0,0,2,56,1,87,0},
{1,56,0,0,0,3,2,46,0,0,2,56,1,87,0},
{1,56,0,0,0,3,11,1,0,0,2,56,1,87,0},
{1,56,0,0,0,3,11,2,0,0,2,56,1,87,0},
{1,56,0,0,0,3,11,3,0,0,2,56,1,87,0},
{1,56,0,0,0,3,11,4,0,0,2,56,1,87,0},
{1,56,0,0,0,3,11,5,0,0,2,56,1,87,0},
{1,56,0,0,0,3,11,6,0,0,2,56,1,87,0},
{1,56,0,0,0,3,11,7,0,0,2,56,1,87,0},
{1,56,0,0,0,3,11,8,0,0,2,56,1,87,0},
{1,56,0,0,0,3,11,9,0,0,2,56,1,87,0},
{1,56,0,0,0,3,11,10,0,0,2,56,0,86,0},
{1,57,0,0,0,3,2,36,0,0,2,57,0,88,0},
{1,57,0,0,0,3,3,0,0,0,2,57,0,88,0},
{1,57,0,0,0,3,4,0,0,0,2,57,0,88,0},
{1,57,0,0,0,3,6,0,0,0,2,57,0,88,0},
{1,57,0,0,0,3,11,11,0,0,2,57,0,88,0},
{1,57,0,0,0,3,11,13,0,0,2,57,0,88,0},
{1,57,0,0,0,3,11,14,0,0,2,57,0,88,0},
{1,57,0,0,0,3,12,1,0,0,2,57,0,88,0},
{1,57,0,0,0,3,12,2,0,0,2,57,0,88,0},
{1,57,0,0,0,3,12,8,0,0,2,57,0,88,0},
{1,57,0,0,0,3,12,9,0,0,2,57,0,88,0},
{1,58,0,0,0,3,11,11,0,0,2,58,0,89,0},
{1,59,0,0,0,3,2,35,0,0,2,59,1,91,0},
{1,59,0,0,0,3,2,37,0,0,2,59,1,91,0},
{1,59,0,0,0,3,2,39,0,0,2,59,1,91,0},
{1,59,0,0,0,3,2,44,0,0,2,59,1,91,0},
{1,59,0,0,0,3,2,45,0,0,2,59,1,91,0},
{1,59,0,0,0,3,2,46,0,0,2,59,1,91,0},
{1,59,0,0,0,3,11,1,0,0,2,59,1,91,0},
{1,59,0,0,0,3,11,2,0,0,2,59,1,91,0},
{1,59,0,0,0,3,11,3,0,0,2,59,1,91,0},
{1,59,0,0,0,3,11,4,0,0,2,59,1,91,0},
{1,59,0,0,0,3,11,5,0,0,2,59,1,91,0},
{1,59,0,0,0,3,11,6,0,0,2,59,1,91,0},
{1,59,0,0,0,3,11,7,0,0,2,59,1,91,0},
{1,59,0,0,0,3,11,8,0,0,2,59,1,91,0},
{1,59,0,0,0,3,11,9,0,0,2,59,1,91,0},
{1,59,0,0,0,3,11,10,0,0,2,59,1,91,0},
{1,59,0,0,0,3,11,11,0,0,2,59,0,90,0},
{1,60,0,0,0,3,2,36,0,0,2,60,0,92,0},
{1,60,0,0,0,3,3,0,0,0,2,60,0,92,0},
{1,60,0,0,0,3,4,0,0,0,2,60,0,92,0},
{1,60,0,0,0,3,6,0,0,0,2,60,0,92,0},
{1,60,0,0,0,3,11,11,0,0,2,60,0,92,0},
{1,60,0,0,0,3,11,13,0,0,2,60,0,92,0},
{1,60,0,0,0,3,11,14,0,0,2,60,0,92,0},
{1,60,0,0,0,3,12,1,0,0,2,60,0,92,0},
{1,60,0,0,0,3,12,2,0,0,2,60,0,92,0},
{1,60,0,0,0,3,12,8,0,0,2,60,0,92,0},
{1,60,0,0,0,3,12,9,0,0,2,60,0,92,0},
{1,61,0,0,0,3,11,12,0,0,2,61,0,93,0},
{1,62,0,0,0,3,2,35,0,0,2,62,1,95,0},
{1,62,0,0,0,3,2,37,0,0,2,62,1,95,0},
{1,62,0,0,0,3,2,39,0,0,2,62,1,95,0},
{1,62,0,0,0,3,2,44,0,0,2,62,1,95,0},
{1,62,0,0,0,3,2,45,0,0,2,62,1,95,0},
{1,62,0,0,0,3,2,46,0,0,2,62,1,95,0},
{1,62,0,0,0,3,11,1,0,0,2,62,1,95,0},
{1,62,0,0,0,3,11,2,0,0,2,62,1,95,0},
{1,62,0,0,0,3,11,3,0,0,2,62,1,95,0},
{1,62,0,0,0,3,11,4,0,0,2,62,1,95,0},
{1,62,0,0,0,3,11,5,0,0,2,62,1,95,0},
{1,62,0,0,0,3,11,6,0,0,2,62,1,95,0},
{1,62,0,0,0,3,11,7,0,0,2,62,1,95,0},
{1,62,0,0,0,3,11,8,0,0,2,62,1,95,0},
{1,62,0,0,0,3,11,9,0,0,2,62,1,95,0},
{1,62,0,0,0,3,11,10,0,0,2,62,1,95,0},
{1,62,0,0,0,3,11,11,0,0,2,62,1,95,0},
{1,62,0,0,0,3,11,12,0,0,2,62,0,94,0},
{1,63,0,0,0,3,2,36,0,0,2,63,4,100,0},
{1,63,0,0,0,3,3,0,0,0,2,63,4,100,0},
{1,63,0,0,0,3,4,0,0,0,2,63,4,100,0},
{1,63,0,0,0,3,6,0,0,0,2,63,4,100,0},
{1,63,0,0,0,3,11,11,0,0,2,63,1,97,0},
{1,63,0,0,0,3,11,13,0,0,2,63,0,96,0},
{1,63,0,0,0,3,11,14,0,0,2,63,2,98,0},
{1,63,0,0,0,3,12,1,0,0,2,63,4,100,0},
{1,63,0,0,0,3,12,2,0,0,2,63,4,100,0},
{1,63,0,0,0,3,12,8,0,0,2,63,4,100,0},
{1,63,0,0,0,3,12,9,0,0,2,63,3,99,0},
{1,64,0,0,0,3,2,36,0,0,2,64,6,107,0},
{1,64,0,0,0,3,3,0,0,0,2,64,0,101,0},
{1,64,0,0,0,3,4,0,0,0,2,64,1,102,0},
{1,64,0,0,0,3,6,0,0,0,2,64,5,106,0},
{1,64,0,0,0,3,12,1,0,0,2,64,3,104,0},
{1,64,0,0,0,3,12,2,0,0,2,64,2,103,0},
{1,64,0,0,0,3,12,8,0,0,2,64,4,105,0},
{1,65,0,0,0,3,2,38,0,0,2,65,0,108,0},
{1,66,0,0,0,3,2,35,0,0,2,66,1,110,0},
{1,66,0,0,0,3,2,37,0,0,2,66,1,110,0},
{1,66,0,0,0,3,2,38,0,0,2,66,0,109,0},
{1,66,0,0,0,3,2,39,0,0,2,66,1,110,0},
{1,66,0,0,0,3,2,44,0,0,2,66,1,110,0},
{1,66,0,0,0,3,2,45,0,0,2,66,1,110,0},
{1,66,0,0,0,3,2,46,0,0,2,66,1,110,0},
{1,66,0,0,0,3,11,1,0,0,2,66,1,110,0},
{1,66,0,0,0,3,11,2,0,0,2,66,1,110,0},
{1,66,0,0,0,3,11,3,0,0,2,66,1,110,0},
{1,66,0,0,0,3,11,4,0,0,2,66,1,110,0},
{1,66,0,0,0,3,11,5,0,0,2,66,1,110,0},
{1,66,0,0,0,3,11,6,0,0,2,66,1,110,0},
{1,66,0,0,0,3,11,7,0,0,2,66,1,110,0},
{1,66,0,0,0,3,11,8,0,0,2,66,1,110,0},
{1,66,0,0,0,3,11,9,0,0,2,66,1,110,0},
{1,66,0,0,0,3,11,10,0,0,2,66,1,110,0},
{1,66,0,0,0,3,11,11,0,0,2,66,1,110,0},
{1,66,0,0,0,3,11,12,0,0,2,66,1,110,0},
{1,66,0,0,0,3,11,14,0,0,2,66,1,110,0},
{1,67,0,0,0,3,2,36,0,0,2,67,1,112,0},
{1,67,0,0,0,3,12,11,0,0,2,67,0,111,0},
{1,68,0,0,0,3,2,35,0,0,2,68,1,114,0},
{1,68,0,0,0,3,2,37,0,0,2,68,1,114,0},
{1,68,0,0,0,3,2,39,0,0,2,68,1,114,0},
{1,68,0,0,0,3,2,44,0,0,2,68,1,114,0},
{1,68,0,0,0,3,2,45,0,0,2,68,1,114,0},
{1,68,0,0,0,3,2,46,0,0,2,68,1,114,0},
{1,68,0,0,0,3,11,1,0,0,2,68,1,114,0},
{1,68,0,0,0,3,11,2,0,0,2,68,1,114,0},
{1,68,0,0,0,3,11,3,0,0,2,68,1,114,0},
{1,68,0,0,0,3,11,4,0,0,2,68,1,114,0},
{1,68,0,0,0,3,11,5,0,0,2,68,1,114,0},
{1,68,0,0,0,3,11,6,0,0,2,68,1,114,0},
{1,68,0,0,0,3,11,7,0,0,2,68,1,114,0},
{1,68,0,0,0,3,11,8,0,0,2,68,1,114,0},
{1,68,0,0,0,3,11,9,0,0,2,68,1,114,0},
{1,68,0,0,0,3,11,10,0,0,2,68,1,114,0},
{1,68,0,0,0,3,11,11,0,0,2,68,1,114,0},
{1,68,0,0,0,3,11,12,0,0,2,68,1,114,0},
{1,68,0,0,0,3,11,14,0,0,2,68,0,113,0},
{1,69,0,0,0,3,2,36,0,0,2,69,0,115,0},
{1,70,0,0,0,3,12,4,0,0,2,70,0,116,0},
{1,70,0,0,0,3,12,5,0,0,2,70,0,116,0},
{1,71,0,0,0,3,12,4,0,0,2,71,0,117,0},
{1,71,0,0,0,3,12,5,0,0,2,71,1,118,0},
{1,72,0,0,0,3,2,44,0,0,2,72,0,119,0},
{1,73,0,0,0,3,2,44,0,0,2,73,0,120,0},
{1,73,0,0,0,3,2,45,0,0,2,73,1,121,0},
{1,74,0,0,0,3,2,36,0,0,2,74,0,122,0},
{1,74,0,0,0,3,3,0,0,0,2,74,0,122,0},
{1,74,0,0,0,3,4,0,0,0,2,74,0,122,0},
{1,74,0,0,0,3,6,0,0,0,2,74,0,122,0},
{1,74,0,0,0,3,11,11,0,0,2,74,0,122,0},
{1,74,0,0,0,3,11,13,0,0,2,74,0,122,0},
{1,74,0,0,0,3,11,14,0,0,2,74,0,122,0},
{1,74,0,0,0,3,12,1,0,0,2,74,0,122,0},
{1,74,0,0,0,3,12,2,0,0,2,74,0,122,0},
{1,74,0,0,0,3,12,8,0,0,2,74,0,122,0},
{1,74,0,0,0,3,12,9,0,0,2,74,0,122,0},
{1,75,0,0,0,3,2,34,0,0,2,75,2,125,0},
{1,75,0,0,0,3,2,36,0,0,2,75,3,126,0},
{1,75,0,0,0,3,2,45,0,0,2,75,0,123,0},
{1,75,0,0,0,3,3,0,0,0,2,75,3,126,0},
{1,75,0,0,0,3,4,0,0,0,2,75,3,126,0},
{1,75,0,0,0,3,6,0,0,0,2,75,3,126,0},
{1,75,0,0,0,3,7,1,0,0,2,75,2,125,0},
{1,75,0,0,0,3,7,2,0,0,2,75,2,125,0},
{1,75,0,0,0,3,7,3,0,0,2,75,2,125,0},
{1,75,0,0,0,3,7,5,0,0,2,75,2,125,0},
{1,75,0,0,0,3,7,6,0,0,2,75,2,125,0},
{1,75,0,0,0,3,7,7,0,0,2,75,2,125,0},
{1,75,0,0,0,3,7,8,0,0,2,75,2,125,0},
{1,75,0,0,0,3,7,9,0,0,2,75,2,125,0},
{1,75,0,0,0,3,11,11,0,0,2,75,3,126,0},
{1,75,0,0,0,3,11,13,0,0,2,75,3,126,0},
{1,75,0,0,0,3,11,14,0,0,2,75,3,126,0},
{1,75,0,0,0,3,12,1,0,0,2,75,3,126,0},
{1,75,0,0,0,3,12,2,0,0,2,75,3,126,0},
{1,75,0,0,0,3,12,4,0,0,2,75,1,124,0},
{1,75,0,0,0,3,12,5,0,0,2,75,1,124,0},
{1,75,0,0,0,3,12,7,0,0,2,75,2,125,0},
{1,75,0,0,0,3,12,8,0,0,2,75,3,126,0},
{1,75,0,0,0,3,12,9,0,0,2,75,3,126,0},
{1,75,0,0,0,3,12,10,0,0,2,75,2,125,0},
{1,76,0,0,0,3,2,34,0,0,2,76,9,136,0},
{1,76,0,0,0,3,7,1,0,0,2,76,4,131,0},
{1,76,0,0,0,3,7,2,0,0,2,76,3,130,0},
{1,76,0,0,0,3,7,3,0,0,2,76,1,128,0},
{1,76,0,0,0,3,7,5,0,0,2,76,2,129,0},
{1,76,0,0,0,3,7,6,0,0,2,76,5,132,0},
{1,76,0,0,0,3,7,7,0,0,2,76,7,134,0},
{1,76,0,0,0,3,7,8,0,0,2,76,6,133,0},
{1,76,0,0,0,3,7,9,0,0,2,76,8,135,0},
{1,76,0,0,0,3,12,7,0,0,2,76,0,127,0},
{1,76,0,0,0,3,12,10,0,0,2,76,9,136,0},
{1,77,0,0,0,3,2,34,0,0,2,77,1,138,0},
{1,77,0,0,0,3,2,35,0,0,2,77,1,138,0},
{1,77,0,0,0,3,2,36,0,0,2,77,1,138,0},
{1,77,0,0,0,3,2,45,0,0,2,77,1,138,0},
{1,77,0,0,0,3,3,0,0,0,2,77,1,138,0},
{1,77,0,0,0,3,4,0,0,0,2,77,1,138,0},
{1,77,0,0,0,3,6,0,0,0,2,77,1,138,0},
{1,77,0,0,0,3,7,1,0,0,2,77,1,138,0},
{1,77,0,0,0,3,7,2,0,0,2,77,1,138,0},
{1,77,0,0,0,3,7,3,0,0,2,77,1,138,0},
{1,77,0,0,0,3,7,4,0,0,2,77,0,137,0},
{1,77,0,0,0,3,7,5,0,0,2,77,1,138,0},
{1,77,0,0,0,3,7,6,0,0,2,77,1,138,0},
{1,77,0,0,0,3,7,7,0,0,2,77,1,138,0},
{1,77,0,0,0,3,7,8,0,0,2,77,1,138,0},
{1,77,0,0,0,3,7,9,0,0,2,77,1,138,0},
{1,77,0,0,0,3,11,11,0,0,2,77,1,138,0},
{1,77,0,0,0,3,11,13,0,0,2,77,1,138,0},
{1,77,0,0,0,3,11,14,0,0,2,77,1,138,0},
{1,77,0,0,0,3,12,1,0,0,2,77,1,138,0},
{1,77,0,0,0,3,12,2,0,0,2,77,1,138,0},
{1,77,0,0,0,3,12,4,0,0,2,77,1,138,0},
{1,77,0,0,0,3,12,5,0,0,2,77,1,138,0},
{1,77,0,0,0,3,12,7,0,0,2,77,1,138,0},
{1,77,0,0,0,3,12,8,0,0,2,77,1,138,0},
{1,77,0,0,0,3,12,9,0,0,2,77,1,138,0},
{1,77,0,0,0,3,12,10,0,0,2,77,1,138,0},
{1,78,0,0,0,3,2,36,0,0,2,78,2,141,0},
{1,78,0,0,0,3,2,45,0,0,2,78,0,139,0},
{1,78,0,0,0,3,3,0,0,0,2,78,2,141,0},
{1,78,0,0,0,3,4,0,0,0,2,78,2,141,0},
{1,78,0,0,0,3,6,0,0,0,2,78,2,141,0},
{1,78,0,0,0,3,11,11,0,0,2,78,2,141,0},
{1,78,0,0,0,3,11,13,0,0,2,78,2,141,0},
{1,78,0,0,0,3,11,14,0,0,2,78,2,141,0},
{1,78,0,0,0,3,12,1,0,0,2,78,2,141,0},
{1,78,0,0,0,3,12,2,0,0,2,78,2,141,0},
{1,78,0,0,0,3,12,4,0,0,2,78,1,140,0},
{1,78,0,0,0,3,12,5,0,0,2,78,1,140,0},
{1,78,0,0,0,3,12,8,0,0,2,78,2,141,0},
{1,78,0,0,0,3,12,9,0,0,2,78,2,141,0},
{1,79,0,0,0,3,2,36,0,0,2,79,1,143,0},
{1,79,0,0,0,3,2,45,0,0,2,79,0,142,0},
{1,79,0,0,0,3,3,0,0,0,2,79,1,143,0},
{1,79,0,0,0,3,4,0,0,0,2,79,1,143,0},
{1,79,0,0,0,3,6,0,0,0,2,79,1,143,0},
{1,79,0,0,0,3,11,11,0,0,2,79,1,143,0},
{1,79,0,0,0,3,11,13,0,0,2,79,1,143,0},
{1,79,0,0,0,3,11,14,0,0,2,79,1,143,0},
{1,79,0,0,0,3,12,1,0,0,2,79,1,143,0},
{1,79,0,0,0,3,12,2,0,0,2,79,1,143,0},
{1,79,0,0,0,3,12,5,0,0,2,79,1,143,0},
{1,79,0,0,0,3,12,8,0,0,2,79,1,143,0},
{1,79,0,0,0,3,12,9,0,0,2,79,1,143,0},
{1,80,0,0,0,3,2,36,0,0,2,80,1,145,0},
{1,80,0,0,0,3,2,37,0,0,2,80,0,144,0},
{1,80,0,0,0,3,3,0,0,0,2,80,1,145,0},
{1,80,0,0,0,3,4,0,0,0,2,80,1,145,0},
{1,80,0,0,0,3,6,0,0,0,2,80,1,145,0},
{1,80,0,0,0,3,11,11,0,0,2,80,1,145,0},
{1,80,0,0,0,3,11,13,0,0,2,80,1,145,0},
{1,80,0,0,0,3,11,14,0,0,2,80,1,145,0},
{1,80,0,0,0,3,12,1,0,0,2,80,1,145,0},
{1,80,0,0,0,3,12,2,0,0,2,80,1,145,0},
{1,80,0,0,0,3,12,8,0,0,2,80,1,145,0},
{1,80,0,0,0,3,12,9,0,0,2,80,1,145,0},
{1,81,0,0,0,3,2,36,0,0,2,81,0,146,0},
{1,81,0,0,0,3,2,45,0,0,2,81,1,147,0},
{1,81,0,0,0,3,3,0,0,0,2,81,0,146,0},
{1,81,0,0,0,3,4,0,0,0,2,81,0,146,0},
{1,81,0,0,0,3,6,0,0,0,2,81,0,146,0},
{1,81,0,0,0,3,11,11,0,0,2,81,0,146,0},
{1,81,0,0,0,3,11,13,0,0,2,81,0,146,0},
{1,81,0,0,0,3,11,14,0,0,2,81,0,146,0},
{1,81,0,0,0,3,12,1,0,0,2,81,0,146,0},
{1,81,0,0,0,3,12,2,0,0,2,81,0,146,0},
{1,81,0,0,0,3,12,8,0,0,2,81,0,146,0},
{1,81,0,0,0,3,12,9,0,0,2,81,0,146,0},
{1,82,0,0,0,3,2,34,0,0,2,82,1,149,0},
{1,82,0,0,0,3,12,10,0,0,2,82,0,148,0},
{1,83,0,0,0,3,2,34,0,0,2,83,0,150,0},
{1,83,0,0,0,3,2,35,0,0,2,83,0,150,0},
{1,83,0,0,0,3,2,36,0,0,2,83,0,150,0},
{1,83,0,0,0,3,2,45,0,0,2,83,0,150,0},
{1,83,0,0,0,3,3,0,0,0,2,83,0,150,0},
{1,83,0,0,0,3,4,0,0,0,2,83,0,150,0},
{1,83,0,0,0,3,6,0,0,0,2,83,0,150,0},
{1,83,0,0,0,3,7,1,0,0,2,83,0,150,0},
{1,83,0,0,0,3,7,2,0,0,2,83,0,150,0},
{1,83,0,0,0,3,7,3,0,0,2,83,0,150,0},
{1,83,0,0,0,3,7,5,0,0,2,83,0,150,0},
{1,83,0,0,0,3,7,6,0,0,2,83,0,150,0},
{1,83,0,0,0,3,7,7,0,0,2,83,0,150,0},
{1,83,0,0,0,3,7,8,0,0,2,83,0,150,0},
{1,83,0,0,0,3,7,9,0,0,2,83,0,150,0},
{1,83,0,0,0,3,11,11,0,0,2,83,0,150,0},
{1,83,0,0,0,3,11,13,0,0,2,83,0,150,0},
{1,83,0,0,0,3,11,14,0,0,2,83,0,150,0},
{1,83,0,0,0,3,12,1,0,0,2,83,0,150,0},
{1,83,0,0,0,3,12,2,0,0,2,83,0,150,0},
{1,83,0,0,0,3,12,4,0,0,2,83,0,150,0},
{1,83,0,0,0,3,12,5,0,0,2,83,0,150,0},
{1,83,0,0,0,3,12,7,0,0,2,83,0,150,0},
{1,83,0,0,0,3,12,8,0,0,2,83,0,150,0},
{1,83,0,0,0,3,12,9,0,0,2,83,0,150,0},
{1,83,0,0,0,3,12,10,0,0,2,83,0,150,0},
{1,84,0,0,0,3,2,34,0,0,2,84,0,151,0},
{1,84,0,0,0,3,2,36,0,0,2,84,0,151,0},
{1,84,0,0,0,3,2,45,0,0,2,84,0,151,0},
{1,84,0,0,0,3,3,0,0,0,2,84,0,151,0},
{1,84,0,0,0,3,4,0,0,0,2,84,0,151,0},
{1,84,0,0,0,3,6,0,0,0,2,84,0,151,0},
{1,84,0,0,0,3,7,1,0,0,2,84,0,151,0},
{1,84,0,0,0,3,7,2,0,0,2,84,0,151,0},
{1,84,0,0,0,3,7,3,0,0,2,84,0,151,0},
{1,84,0,0,0,3,7,5,0,0,2,84,0,151,0},
{1,84,0,0,0,3,7,6,0,0,2,84,0,151,0},
{1,84,0,0,0,3,7,7,0,0,2,84,0,151,0},
{1,84,0,0,0,3,7,8,0,0,2,84,0,151,0},
{1,84,0,0,0,3,7,9,0,0,2,84,0,151,0},
{1,84,0,0,0,3,11,11,0,0,2,84,0,151,0},
{1,84,0,0,0,3,11,13,0,0,2,84,0,151,0},
{1,84,0,0,0,3,11,14,0,0,2,84,0,151,0},
{1,84,0,0,0,3,12,1,0,0,2,84,0,151,0},
{1,84,0,0,0,3,12,2,0,0,2,84,0,151,0},
{1,84,0,0,0,3,12,4,0,0,2,84,0,151,0},
{1,84,0,0,0,3,12,5,0,0,2,84,0,151,0},
{1,84,0,0,0,3,12,7,0,0,2,84,0,151,0},
{1,84,0,0,0,3,12,8,0,0,2,84,0,151,0},
{1,84,0,0,0,3,12,9,0,0,2,84,0,151,0},
{1,84,0,0,0,3,12,10,0,0,2,84,0,151,0},
{1,85,0,0,0,3,2,34,0,0,2,85,0,152,0},
{1,85,0,0,0,3,2,35,0,0,2,85,1,153,0},
{1,85,0,0,0,3,2,36,0,0,2,85,0,152,0},
{1,85,0,0,0,3,2,45,0,0,2,85,0,152,0},
{1,85,0,0,0,3,3,0,0,0,2,85,0,152,0},
{1,85,0,0,0,3,4,0,0,0,2,85,0,152,0},
{1,85,0,0,0,3,6,0,0,0,2,85,0,152,0},
{1,85,0,0,0,3,7,1,0,0,2,85,0,152,0},
{1,85,0,0,0,3,7,2,0,0,2,85,0,152,0},
{1,85,0,0,0,3,7,3,0,0,2,85,0,152,0},
{1,85,0,0,0,3,7,5,0,0,2,85,0,152,0},
{1,85,0,0,0,3,7,6,0,0,2,85,0,152,0},
{1,85,0,0,0,3,7,7,0,0,2,85,0,152,0},
{1,85,0,0,0,3,7,8,0,0,2,85,0,152,0},
{1,85,0,0,0,3,7,9,0,0,2,85,0,152,0},
{1,85,0,0,0,3,11,11,0,0,2,85,0,152,0},
{1,85,0,0,0,3,11,13,0,0,2,85,0,152,0},
{1,85,0,0,0,3,11,14,0,0,2,85,0,152,0},
{1,85,0,0,0,3,12,1,0,0,2,85,0,152,0},
{1,85,0,0,0,3,12,2,0,0,2,85,0,152,0},
{1,85,0,0,0,3,12,4,0,0,2,85,0,152,0},
{1,85,0,0,0,3,12,5,0,0,2,85,0,152,0},
{1,85,0,0,0,3,12,7,0,0,2,85,0,152,0},
{1,85,0,0,0,3,12,8,0,0,2,85,0,152,0},
{1,85,0,0,0,3,12,9,0,0,2,85,0,152,0},
{1,85,0,0,0,3,12,10,0,0,2,85,0,152,0},
{1,86,0,0,0,3,2,36,0,0,2,86,0,154,0},
{1,86,0,0,0,3,3,0,0,0,2,86,0,154,0},
{1,86,0,0,0,3,4,0,0,0,2,86,0,154,0},
{1,86,0,0,0,3,6,0,0,0,2,86,0,154,0},
{1,86,0,0,0,3,11,11,0,0,2,86,0,154,0},
{1,86,0,0,0,3,11,13,0,0,2,86,0,154,0},
{1,86,0,0,0,3,11,14,0,0,2,86,0,154,0},
{1,86,0,0,0,3,12,1,0,0,2,86,0,154,0},
{1,86,0,0,0,3,12,2,0,0,2,86,0,154,0},
{1,86,0,0,0,3,12,8,0,0,2,86,0,154,0},
{1,86,0,0,0,3,12,9,0,0,2,86,0,154,0},
{1,87,0,0,0,3,2,36,0,0,2,87,0,155,0},
{1,87,0,0,0,3,3,0,0,0,2,87,0,155,0},
{1,87,0,0,0,3,4,0,0,0,2,87,0,155,0},
{1,87,0,0,0,3,6,0,0,0,2,87,0,155,0},
{1,87,0,0,0,3,11,11,0,0,2,87,0,155,0},
{1,87,0,0,0,3,11,13,0,0,2,87,0,155,0},
{1,87,0,0,0,3,11,14,0,0,2,87,0,155,0},
{1,87,0,0,0,3,12,1,0,0,2,87,0,155,0},
{1,87,0,0,0,3,12,2,0,0,2,87,0,155,0},
{1,87,0,0,0,3,12,8,0,0,2,87,0,155,0},
{1,87,0,0,0,3,12,9,0,0,2,87,0,155,0}};
grammar.AddCells(685,A);}

void make_formulas(TGrammar& grammar)
{
grammar.type = T_Grammar(66417); grammar.look_ahead = 0;
grammar.AddFormula("S_");
{ static const int I[][5] = {{1,1,0,0,0}}; grammar.AddProduce(1, I); }
grammar.AddFormula("Program");
{ static const int I[][5] = {{7,49,0,0,24},{1,8,0,0,0},{7,55,0,0,16}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00002_");
{ static const int I[][5] = {{1,3,0,0,0},{7,3,0,0,8}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00003_");
{ static const int I[][5] = {{3,2,45,0,0},{7,52,0,0,8}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{3,12,3,0,0},{3,12,1,0,0},{7,27,0,0,24},{1,4,0,0,0},{1,7,0,0,0}}; grammar.AddProduce(5, I); }
{ static const int I[][5] = {{1,70,0,0,0}}; grammar.AddProduce(1, I); }
grammar.AddFormula("_f_00004_");
{ static const int I[][5] = {{3,12,11,0,0},{7,26,2,0,8}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{3,2,36,0,0},{7,37,2,0,8},{1,10,0,0,0},{1,6,0,0,0},{7,26,0,0,8},{3,2,37,0,0}}; grammar.AddProduce(6, I); }
grammar.AddFormula("_f_00005_");
{ static const int I[][5] = {{3,2,44,0,0},{1,10,0,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00006_");
{ static const int I[][5] = {{1,5,0,0,0},{1,6,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("_f_00007_");
{ static const int I[][5] = {{3,2,45,0,0},{7,28,0,0,24}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{3,12,10,0,0},{7,28,1,0,24}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{3,2,34,0,0},{7,26,0,0,16},{1,83,0,0,0},{3,2,35,0,0},{7,28,2,0,24}}; grammar.AddProduce(5, I); }
grammar.AddFormula("_f_00008_");
{ static const int I[][5] = {{1,2,0,0,0},{1,8,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("DefParInit");
{ static const int I[][5] = {{3,1,14,0,0},{7,76,0,0,16},{1,30,0,0,0},{7,25,0,0,24}}; grammar.AddProduce(4, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("DefParItem");
{ static const int I[][5] = {{1,11,0,0,0},{7,3,0,0,8}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00011_");
{ static const int I[][5] = {{3,12,4,0,0},{3,12,2,0,0},{7,24,0,0,24},{1,16,0,0,0},{1,9,0,0,0}}; grammar.AddProduce(5, I); }
{ static const int I[][5] = {{3,12,5,0,0},{3,6,0,0,0},{7,23,0,0,24},{1,9,0,0,0}}; grammar.AddProduce(4, I); }
grammar.AddFormula("Initializer");
{ static const int I[][5] = {{3,12,10,0,0},{7,73,0,0,16},{7,53,0,0,8}}; grammar.AddProduce(3, I); }
{ static const int I[][5] = {{3,2,34,0,0},{7,73,1,0,16},{7,53,0,0,8},{1,15,0,0,0},{7,3,0,0,8},{1,14,0,0,0},{3,2,35,0,0},{7,74,0,0,16}}; grammar.AddProduce(8, I); }
grammar.AddFormula("_f_00013_");
{ static const int I[][5] = {{3,2,44,0,0},{1,15,0,0,0},{7,3,0,0,8}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00014_");
{ static const int I[][5] = {{1,13,0,0,0},{1,14,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("AInitItem");
{ static const int I[][5] = {{1,12,0,0,0}}; grammar.AddProduce(1, I); }
{ static const int I[][5] = {{1,30,0,0,0},{7,72,0,0,16}}; grammar.AddProduce(2, I); }
grammar.AddFormula("DefArrDA");
{ static const int I[][5] = {{1,17,0,0,0},{1,19,0,0,0},{7,70,0,0,16}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00017_");
{ static const int I[][5] = {{3,12,12,0,0},{7,32,0,0,24}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{3,2,38,0,0},{1,30,0,0,0},{3,2,39,0,0},{7,31,0,0,24}}; grammar.AddProduce(4, I); }
grammar.AddFormula("_f_00018_");
{ static const int I[][5] = {{3,2,38,0,0},{1,30,0,0,0},{3,2,39,0,0},{7,31,0,0,24}}; grammar.AddProduce(4, I); }
grammar.AddFormula("_f_00019_");
{ static const int I[][5] = {{1,18,0,0,0},{1,19,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("DefVar");
{ static const int I[][5] = {{3,6,0,0,0},{7,33,0,0,24},{1,21,0,0,0}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00021_");
{ static const int I[][5] = {{3,1,14,0,0},{7,75,0,0,16},{1,30,0,0,0},{7,34,0,0,24}}; grammar.AddProduce(4, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("DefIAV");
{ static const int I[][5] = {{3,12,2,0,0},{7,30,0,0,24},{1,16,0,0,0},{1,23,0,0,0}}; grammar.AddProduce(4, I); }
{ static const int I[][5] = {{1,20,0,0,0}}; grammar.AddProduce(1, I); }
grammar.AddFormula("_f_00023_");
{ static const int I[][5] = {{3,1,14,0,0},{7,71,0,0,16},{1,12,0,0,0},{7,29,0,0,24}}; grammar.AddProduce(4, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("DefItem");
{ static const int I[][5] = {{3,11,7,0,0},{1,22,0,0,0},{7,36,0,0,8}}; grammar.AddProduce(3, I); }
{ static const int I[][5] = {{1,22,0,0,0}}; grammar.AddProduce(1, I); }
grammar.AddFormula("Condition");
{ static const int I[][5] = {{3,12,5,0,0},{7,37,0,0,24},{1,26,0,0,0},{7,35,0,0,24}}; grammar.AddProduce(4, I); }
{ static const int I[][5] = {{7,56,241,0,16},{1,27,0,0,0},{7,1,241,0,8}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00026_");
{ static const int I[][5] = {{3,11,7,0,0},{1,20,0,0,0},{7,36,0,0,8}}; grammar.AddProduce(3, I); }
{ static const int I[][5] = {{1,20,0,0,0}}; grammar.AddProduce(1, I); }
grammar.AddFormula("Expressions");
{ static const int I[][5] = {{1,30,0,0,0},{7,21,0,0,24},{1,29,0,0,0},{7,1,0,0,16}}; grammar.AddProduce(4, I); }
grammar.AddFormula("_f_00028_");
{ static const int I[][5] = {{3,2,44,0,0},{1,30,0,0,0},{7,3,0,0,8},{7,58,0,0,16}}; grammar.AddProduce(4, I); }
grammar.AddFormula("_f_00029_");
{ static const int I[][5] = {{1,28,0,0,0},{1,29,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("Assign");
{ static const int I[][5] = {{1,32,0,0,0},{1,31,0,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00031_");
{ static const int I[][5] = {{3,11,1,0,0},{1,30,0,0,0},{7,15,0,0,24}}; grammar.AddProduce(3, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("Question");
{ static const int I[][5] = {{1,36,0,0,0},{1,34,0,0,0},{1,35,0,0,0}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00033_");
{ static const int I[][5] = {{3,11,3,0,0},{1,36,0,0,0},{7,15,0,0,24}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00034_");
{ static const int I[][5] = {{1,33,0,0,0},{1,34,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("_f_00035_");
{ static const int I[][5] = {{3,11,2,0,0},{7,59,0,0,16},{1,87,0,0,0},{3,2,46,0,0},{7,60,0,0,16},{1,32,0,0,0},{7,20,0,0,24}}; grammar.AddProduce(7, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("AndAnd");
{ static const int I[][5] = {{1,39,0,0,0},{1,38,0,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00037_");
{ static const int I[][5] = {{3,11,4,0,0},{1,39,0,0,0},{7,15,0,0,24}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00038_");
{ static const int I[][5] = {{1,37,0,0,0},{1,38,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("Or");
{ static const int I[][5] = {{1,42,0,0,0},{1,41,0,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00040_");
{ static const int I[][5] = {{3,11,5,0,0},{1,42,0,0,0},{7,15,0,0,24}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00041_");
{ static const int I[][5] = {{1,40,0,0,0},{1,41,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("XOr");
{ static const int I[][5] = {{1,45,0,0,0},{1,44,0,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00043_");
{ static const int I[][5] = {{3,11,6,0,0},{1,45,0,0,0},{7,15,0,0,24}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00044_");
{ static const int I[][5] = {{1,43,0,0,0},{1,44,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("And");
{ static const int I[][5] = {{1,48,0,0,0},{1,47,0,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00046_");
{ static const int I[][5] = {{3,11,7,0,0},{1,48,0,0,0},{7,15,0,0,24}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00047_");
{ static const int I[][5] = {{1,46,0,0,0},{1,47,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("Equ");
{ static const int I[][5] = {{1,51,0,0,0},{1,50,0,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00049_");
{ static const int I[][5] = {{3,11,8,0,0},{1,51,0,0,0},{7,15,0,0,24}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00050_");
{ static const int I[][5] = {{1,49,0,0,0},{1,50,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("Compare");
{ static const int I[][5] = {{1,54,0,0,0},{1,53,0,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00052_");
{ static const int I[][5] = {{3,11,9,0,0},{1,54,0,0,0},{7,15,0,0,24}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00053_");
{ static const int I[][5] = {{1,52,0,0,0},{1,53,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("Shift");
{ static const int I[][5] = {{1,57,0,0,0},{1,56,0,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00055_");
{ static const int I[][5] = {{3,11,10,0,0},{1,57,0,0,0},{7,15,0,0,24}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00056_");
{ static const int I[][5] = {{1,55,0,0,0},{1,56,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("Term");
{ static const int I[][5] = {{1,60,0,0,0},{1,59,0,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00058_");
{ static const int I[][5] = {{3,11,11,0,0},{1,60,0,0,0},{7,15,0,0,24}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00059_");
{ static const int I[][5] = {{1,58,0,0,0},{1,59,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("Factor");
{ static const int I[][5] = {{1,63,0,0,0},{1,62,0,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00061_");
{ static const int I[][5] = {{3,11,12,0,0},{1,63,0,0,0},{7,15,0,0,24}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00062_");
{ static const int I[][5] = {{1,61,0,0,0},{1,62,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("Unary");
{ static const int I[][5] = {{3,11,13,0,0},{1,63,0,0,32},{7,16,0,0,24}}; grammar.AddProduce(3, I); }
{ static const int I[][5] = {{3,11,11,0,0},{1,63,0,0,32},{7,16,0,0,24}}; grammar.AddProduce(3, I); }
{ static const int I[][5] = {{3,11,14,0,0},{1,63,0,0,32},{7,16,0,0,24}}; grammar.AddProduce(3, I); }
{ static const int I[][5] = {{3,12,9,0,0},{1,63,0,0,32},{7,19,0,0,24}}; grammar.AddProduce(3, I); }
{ static const int I[][5] = {{1,64,0,0,0},{1,68,0,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00064_");
{ static const int I[][5] = {{3,3,0,0,0},{7,6,0,0,24}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{3,4,0,0,0},{7,6,0,0,24}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{3,12,2,0,0},{7,10,0,0,24},{1,66,0,0,0},{7,14,0,0,24}}; grammar.AddProduce(4, I); }
{ static const int I[][5] = {{3,12,1,0,0},{1,67,0,0,0}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{3,12,8,0,0},{1,69,0,0,0},{7,19,0,0,24}}; grammar.AddProduce(3, I); }
{ static const int I[][5] = {{3,6,0,0,0},{7,7,0,0,24}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{1,69,0,0,0}}; grammar.AddProduce(1, I); }
grammar.AddFormula("_f_00065_");
{ static const int I[][5] = {{3,2,38,0,0},{1,87,0,0,0},{3,2,39,0,0},{7,12,0,0,24}}; grammar.AddProduce(4, I); }
grammar.AddFormula("_f_00066_");
{ static const int I[][5] = {{1,65,0,0,0},{1,66,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("_f_00067_");
{ static const int I[][5] = {{3,12,11,0,0},{7,9,0,0,24}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{3,2,36,0,0},{7,56,512,0,16},{1,27,0,0,0},{7,1,512,0,8},{3,2,37,0,0},{7,9,1,0,24}}; grammar.AddProduce(6, I); }
grammar.AddFormula("_f_00068_");
{ static const int I[][5] = {{3,11,14,0,0},{7,17,0,0,24}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("Primary");
{ static const int I[][5] = {{3,2,36,0,0},{7,56,0,0,16},{1,27,0,0,0},{7,1,0,0,8},{3,2,37,0,0},{7,18,0,0,8}}; grammar.AddProduce(6, I); }
grammar.AddFormula("DefineSemi");
{ static const int I[][5] = {{1,71,0,0,0},{7,37,0,0,24},{1,24,0,0,0},{7,3,0,0,8},{1,73,0,0,0},{7,69,0,0,16},{3,2,45,0,0}}; grammar.AddProduce(7, I); }
grammar.AddFormula("_f_00071_");
{ static const int I[][5] = {{3,12,4,0,0}}; grammar.AddProduce(1, I); }
{ static const int I[][5] = {{3,12,5,0,0}}; grammar.AddProduce(1, I); }
grammar.AddFormula("_f_00072_");
{ static const int I[][5] = {{3,2,44,0,0},{1,24,0,0,0},{7,3,0,0,8}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00073_");
{ static const int I[][5] = {{1,72,0,0,0},{1,73,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("ExprSemi");
{ static const int I[][5] = {{1,86,0,0,0},{3,2,45,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("DefExpr");
{ static const int I[][5] = {{3,2,45,0,0},{7,52,0,0,8}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{1,70,0,0,0}}; grammar.AddProduce(1, I); }
{ static const int I[][5] = {{1,76,0,0,0}}; grammar.AddProduce(1, I); }
{ static const int I[][5] = {{1,74,0,0,0}}; grammar.AddProduce(1, I); }
grammar.AddFormula("_f_00076_");
{ static const int I[][5] = {{3,12,7,0,0},{3,2,46,0,0},{7,8,0,0,16},{1,75,0,0,0},{7,8,0,0,8}}; grammar.AddProduce(5, I); }
{ static const int I[][5] = {{3,7,3,0,0},{3,2,36,0,0},{7,63,0,0,16},{1,25,0,0,0},{3,2,37,0,0},{7,64,0,0,16},{1,75,0,0,0},{1,77,0,0,0}}; grammar.AddProduce(8, I); }
{ static const int I[][5] = {{3,7,5,0,0},{7,38,0,0,24},{1,75,0,0,0},{3,7,2,0,0},{3,2,36,0,0},{7,61,0,0,16},{1,25,0,0,0},{3,2,37,0,0},{3,2,45,0,0},{7,39,0,0,24}}; grammar.AddProduce(10, I); }
{ static const int I[][5] = {{3,7,2,0,0},{7,40,0,0,24},{3,2,36,0,0},{1,25,0,0,0},{3,2,37,0,0},{7,62,0,0,16},{1,75,0,0,0},{7,41,0,0,24}}; grammar.AddProduce(8, I); }
{ static const int I[][5] = {{3,7,1,0,0},{3,2,36,0,0},{7,42,0,0,24},{1,78,0,0,0},{7,66,0,0,16},{1,79,0,0,0},{7,67,0,0,16},{1,80,0,0,0},{7,68,0,0,16},{1,75,0,0,0},{7,43,0,0,24}}; grammar.AddProduce(11, I); }
{ static const int I[][5] = {{3,7,6,0,0},{3,6,0,0,0},{3,2,45,0,0},{7,45,0,0,24}}; grammar.AddProduce(4, I); }
{ static const int I[][5] = {{3,7,8,0,0},{3,2,45,0,0},{7,46,0,0,24}}; grammar.AddProduce(3, I); }
{ static const int I[][5] = {{3,7,7,0,0},{3,2,45,0,0},{7,47,0,0,24}}; grammar.AddProduce(3, I); }
{ static const int I[][5] = {{3,7,9,0,0},{1,81,0,0,0},{3,2,45,0,0}}; grammar.AddProduce(3, I); }
{ static const int I[][5] = {{1,82,0,0,0}}; grammar.AddProduce(1, I); }
grammar.AddFormula("_f_00077_");
{ static const int I[][5] = {{3,7,4,0,0},{7,65,0,0,16},{1,75,0,0,0},{7,44,1,0,24}}; grammar.AddProduce(4, I); }
{ static const int I[][5] = {{7,44,0,0,24}}; grammar.AddProduce(1, I); }
grammar.AddFormula("_f_00078_");
{ static const int I[][5] = {{3,2,45,0,0},{7,52,0,0,8}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{1,70,0,0,0}}; grammar.AddProduce(1, I); }
{ static const int I[][5] = {{1,74,0,0,0}}; grammar.AddProduce(1, I); }
grammar.AddFormula("_f_00079_");
{ static const int I[][5] = {{3,2,45,0,0},{7,52,0,0,24}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{1,25,0,0,0},{3,2,45,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00080_");
{ static const int I[][5] = {{3,2,37,0,0},{7,52,0,0,8}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{1,86,0,0,0},{3,2,37,0,0}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00081_");
{ static const int I[][5] = {{1,87,0,0,0},{7,48,1,0,24}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{7,48,0,0,24}}; grammar.AddProduce(1, I); }
grammar.AddFormula("_f_00082_");
{ static const int I[][5] = {{3,12,10,0,0},{7,51,0,0,24},{7,55,0,0,16}}; grammar.AddProduce(3, I); }
{ static const int I[][5] = {{3,2,34,0,0},{7,51,0,0,24},{1,83,0,0,0},{3,2,35,0,0},{7,55,0,0,16},{7,3,0,0,8}}; grammar.AddProduce(6, I); }
grammar.AddFormula("StmExpr");
{ static const int I[][5] = {{7,49,0,0,24},{1,85,0,0,0},{7,55,0,0,16}}; grammar.AddProduce(3, I); }
grammar.AddFormula("_f_00084_");
{ static const int I[][5] = {{1,75,0,0,0},{7,3,0,0,8}}; grammar.AddProduce(2, I); }
grammar.AddFormula("_f_00085_");
{ static const int I[][5] = {{1,84,0,0,0},{1,85,0,0,32}}; grammar.AddProduce(2, I); }
{ static const int I[][5] = {{}}; grammar.AddProduce(0, I); }
grammar.AddFormula("ExpressionExpression");
{ static const int I[][5] = {{7,56,16,0,16},{1,27,0,0,0},{7,1,16,0,8}}; grammar.AddProduce(3, I); }
grammar.AddFormula("ExpressionValue");
{ static const int I[][5] = {{7,56,256,0,16},{1,27,0,0,0},{7,1,256,0,8}}; grammar.AddProduce(3, I); }
}

void make_vectors(TGrammar& grammar)
{
}

void make_grammar(TGrammar& grammar) { make_cells(grammar); make_formulas(grammar); make_vectors(grammar); }
