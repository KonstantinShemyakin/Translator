statement_expression ::= assignment | preincrement_expression | postincrement_expression | predecrement_expression | postdecrement_expression | method_invocation

expression_or_not ::= expression |
statement_expression_list ::= statement_expression | statement_expression_list , statement_expression

// Expressions
constant_expression ::= expression
expression ::= assignment_expression

assignment_expression ::= conditional_expression | assignment

assignment ::= left_hand_side assignment_operator assignment_expression

left_hand_side ::= expression_name | field_access | array_access

assignment_operator ::= = | *= | /= | %= | += | -= | <<= | >>= | >>>= | &= | ^= | |=

conditional_expression ::= conditional_or_expression | conditional_or_expression '?' expression : conditional_expression

conditional_or_expression ::= conditional_and_expression | conditional_or_expression || conditional_and_expression

conditional_and_expression ::= inclusive_or_expression | conditional_and_expression && inclusive_or_expression

inclusive_or_expression ::= exclusive_or_expression | inclusive_or_expression '|' exclusive_or_expression

exclusive_or_expression ::= and_expression | exclusive_or_expression ^ and_expression

and_expression ::= equality_expression | and_expression & equality_expression

equality_expression ::= relational_expression | equality_expression == relational_expression | equality_expression != relational_expression

relational_expression ::= shift_expression | relational_expression < shift_expression | relational_expression > shift_expression | relational_expression <= shift_expression | relational_expression >= shift_expression | relational_expression instanceof reference_type

shift_expression ::= additive_expression | shift_expression << additive_expression | shift_expression >> additive_expression | shift_expression >>> additive_expression

additive_expression ::= multiplicative_expression | additive_expression + multiplicative_expression | additive_expression - multiplicative_expression

multiplicative_expression ::= unary_expression | multiplicative_expression * unary_expression | multiplicative_expression / unary_expression | multiplicative_expression % unary_expression

cast_expression ::= ( primitive_type ) unary_expression | ( reference_type ) unary_expression_not_plus_minus

unary_expression ::= preincrement_expression | predecrement_expression | + unary_expression | - unary_expression | unary_expression_not_plus_minus

predecrement_expression ::= -- unary_expression

preincrement_expression ::= ++ unary_expression

unary_expression_not_plus_minus ::= postfix_expression | ~ unary_expression | ! unary_expression | cast_expression

postdecrement_expression ::= postfix_expression --

postincrement_expression ::= postfix_expression ++

postfix_expression ::= primary | expression_name | postincrement_expression | postdecrement_expression

method_invocation ::= method_name ( argument_list_or_not ) | primary . identifier ( argument_list_or_not ) | super . identifier ( argument_list_or_not )

field_access ::= primary . identifier | super . identifier

primary ::= primary_no_new_array// | array_creation_expression

primary_no_new_array ::= literal | this | ( expression ) | field_access | method_invocation | array_access

argument_list ::= expression | argument_list , expression

array_creation_expression ::= new primitive_type dim_exprs dims_or_not// | new class_or_interface_type dim_exprs dims_or_not
dims_or_not ::= dims |

dim_exprs ::= dim_expr | dim_exprs dim_expr

dim_expr ::= [ expression ]

dims ::= [ ] | dims [ ]

array_access ::= expression_name [ expression ] | primary_no_new_array [ expression]

reference_type ::= class_or_interface_type// | array_type

class_or_interface_type ::= class_type | interface_type

argument_list_or_not ::= argument_list |

//array_type ::= type [ ]

// Tokens
package_name ::= PACKAGE_NAME
type_name ::= TYPE_NAME
expression_name ::= EXPRESSION_NAME
method_name ::= METHOD_NAME
identifier ::= IDENTIFIER

simple_type_name ::= TYPE_NAME

literal ::= Integer | Number | null

// <keyword> ::= abstract | boolean | break | byte | case | catch | char | class | const | continue | default | do | double | else | extends | final | finally | float | for | goto | if | implements | import | instanceof | int | interface | long | native | new | null | package | private | protected | public | return | short | static | super | switch | synchronized | this | throw | throws | transient | try | void | volatile | while

