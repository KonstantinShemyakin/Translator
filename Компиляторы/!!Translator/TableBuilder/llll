1c1,5
< statement_expression ::= assignment | preincrement_expression | postincrement_expression | predecrement_expression | postdecrement_expression | method_invocation
---
> // Programs
> compilation_unit ::= 
> package_declaration_or_not 
> import_declarations_or_not 
> type_declarations_or_not
2a7,217
> package_declaration_or_not ::= package_declaration |
> import_declarations_or_not ::= import_declarations |
> type_declarations_or_not ::= type_declarations |
> // Declarations
> package_declaration ::= package package_name ;
> import_declarations ::= import_declaration | import_declarations import_declaration
> 
> import_declaration ::= single_type_import_declaration | type_import_on_demand_declaration
> 
> single_type_import_declaration ::= import type_name ;
> 
> type_import_on_demand_declaration ::= import package_name . * ;
> 
> type_declarations ::= type_declaration | type_declarations type_declaration
> 
> type_declaration ::= class_declaration | interface_declaration | ;
> 
> class_declaration ::= class_modifiers_or_not class identifier super_super_or_not interfaces_or_not class_body
> class_modifiers_or_not ::= class_modifiers |
> super_super_or_not ::= super_super |
> interfaces_or_not ::= interfaces |
> 
> class_modifiers ::= class_modifier | class_modifiers class_modifier
> 
> //class_modifier ::= public | abstract | final
> 
> super_super ::= extends class_type
> 
> interfaces ::= implements interface_type_list
> 
> interface_type_list ::= interface_type | interface_type_list , interface_type
> 
> class_body ::= '{' class_body_declarations_or_not '}'
> class_body_declarations_or_not ::= class_body_declarations |
> 
> class_body_declarations ::= class_body_declaration | class_body_declarations class_body_declaration
> 
> class_body_declaration ::= class_member_declaration | static_initializer | constructor_declaration
> 
> class_member_declaration ::= field_declaration | method_declaration
> 
> static_initializer ::= static block
> 
> constructor_declaration ::= constructor_modifiers_or_not constructor_declarator throws_throws_or_not constructor_body
> constructor_modifiers_or_not ::= constructor_modifiers |
> throws_throws_or_not ::= throws_throws |
> 
> constructor_modifiers ::= constructor_modifier | constructor_modifiers constructor_modifier
> 
> //constructor_modifier ::= public | protected | private
> 
> constructor_declarator ::= simple_type_name ( formal_parameter_list_or_not )
> formal_parameter_list_or_not ::= formal_parameter_list |
> 
> formal_parameter_list ::= formal_parameter | formal_parameter_list , formal_parameter
> 
> formal_parameter ::= type variable_declarator_id
> 
> throws_throws ::= throws class_type_list
> 
> class_type_list ::= class_type | class_type_list , class_type
> 
> constructor_body ::= '{' explicit_constructor_invocation_or_not block_statements_or_not '}'
> explicit_constructor_invocation_or_not ::= explicit_constructor_invocation |
> block_statements_or_not ::= block_statements |
> 
> explicit_constructor_invocation::= this ( argument_list_or_not ) | super ( argument_list_or_not )
> argument_list_or_not ::= argument_list |
> 
> //field_declaration ::= field_modifiers_or_not type variable_declarators ;
> field_declaration ::= field_type variable_declarators ;
> field_modifiers_or_not ::= field_modifiers |
> 
> field_modifiers ::= field_modifier | field_modifiers field_modifier
> 
> //field_modifier ::= public | protected | private | static | final | transient | volatile
> 
> variable_declarators ::= variable_declarator | variable_declarators , variable_declarator
> 
> variable_declarator ::= variable_declarator_id | variable_declarator_id = variable_initializer
> 
> variable_declarator_id ::= identifier | variable_declarator_id [ ]
> 
> variable_initializer ::= expression | array_initializer
> 
> method_declaration ::= method_header method_body
> 
> method_header ::= method_modifiers_or_not result_type method_declarator throws_throws_or_not
> method_modifiers_or_not ::= method_modifiers |
> 
> result_type ::= type | void
> 
> method_modifiers ::= method_modifier | method_modifiers method_modifier
> 
> //method_modifier ::= public | protected | private | static | abstract | final | synchronized | native
> 
> method_declarator ::= identifier ( formal_parameter_list_or_not )
> 
> method_body ::= block | ;
> 
> interface_declaration ::= interface_modifiers_or_not interface identifier extends_interfaces_or_not interface_body
> interface_modifiers_or_not ::= interface_modifiers |
> extends_interfaces_or_not ::= extends_interfaces |
> 
> interface_modifiers ::= interface_modifier | interface_modifiers interface_modifier
> 
> //interface_modifier ::= public | abstract
> 
> extends_interfaces ::= extends interface_type | extends_interfaces , interface_type
> 
> interface_body ::= '{' interface_member_declarations_or_not '}'
> interface_member_declarations_or_not ::= interface_member_declarations |
> 
> interface_member_declarations ::= interface_member_declaration | interface_member_declarations interface_member_declaration
> 
> interface_member_declaration ::= constant_declaration | abstract_method_declaration
> 
> constant_declaration ::= constant_modifiers type variable_declarator
> 
> //constant_modifiers ::= public | static | final
> 
> abstract_method_declaration::= abstract_method_modifiers_or_not result_type method_declarator throws_throws_or_not ;
> abstract_method_modifiers_or_not ::= abstract_method_modifiers |
> 
> abstract_method_modifiers ::= abstract_method_modifier | abstract_method_modifiers abstract_method_modifier
> 
> //abstract_method_modifier ::= public | abstract
> 
> array_initializer ::= '{' variable_initializers_or_not array_initializer_comma '}'
> variable_initializers_or_not ::= variable_initializers |
> array_initializer_comma_or_not ::= array_initializer_comma |
> array_initializer_comma ::= , |
> 
> variable_initializers ::= variable_initializer | variable_initializers , variable_initializer
> 
> //variable_initializer ::= expression | array_initializer
> 
> // Types
> type ::= primitive_type | reference_type
> primitive_type // ::= numeric_type | boolean
> 
> //numeric_type ::= integral_type | floating_point_type
> 
> //integral_type ::= byte | short | int | long | char
> 
> //floating_point_type ::= float | double
> 
> reference_type ::= class_or_interface_type | array_type
> 
> class_or_interface_type ::= class_type | interface_type
> 
> //class_type ::= type_name
> 
> //interface_type ::= type_name
> 
> array_type ::= type [ ]
> 
> // Blocks and Commands
> block ::= '{' block_statements_or_not '}'
> block_statements ::= block_statement | block_statements block_statement
> 
> block_statement ::= local_variable_declaration_statement | statement
> 
> local_variable_declaration_statement ::= local_variable_declaration ;
> 
> local_variable_declaration ::= type variable_declarators
> 
> statement ::= statement_without_trailing_substatement | labeled_statement | if_then_statement | if_then_else_statement | while_statement | for_statement
> 
> statement_no_short_if ::= statement_without_trailing_substatement | labeled_statement_no_short_if | if_then_else_statement_no_short_if | while_statement_no_short_if | for_statement_no_short_if
> 
> statement_without_trailing_substatement ::= block | empty_statement | expression_statement | switch_statement | do_statement | break_statement | continue_statement | return_statement | synchronized_statement | throws_statement | try_statement
> 
> empty_statement ::= ;
> 
> labeled_statement ::= identifier : statement
> 
> labeled_statement_no_short_if ::= identifier : statement_no_short_if
> 
> expression_statement ::= statement_expression ;
> 
> statement_expression ::= assignment | preincrement_expression | postincrement_expression | predecrement_expression | postdecrement_expression | method_invocation | class_instance_creation_expression
> 
> if_then_statement::= if ( expression ) statement
> 
> if_then_else_statement::= if ( expression ) statement_no_short_if else statement
> 
> if_then_else_statement_no_short_if ::= if ( expression ) statement_no_short_if else statement_no_short_if
> 
> switch_statement ::= switch ( expression ) switch_block
> 
> switch_block ::= '{' switch_block_statement_groups_or_not switch_labels_or_not '}'
> switch_block_statement_groups_or_not ::= switch_block_statement_groups |
> switch_labels_or_not ::= switch_labels |
> 
> switch_block_statement_groups ::= switch_block_statement_group | switch_block_statement_groups switch_block_statement_group
> 
> switch_block_statement_group ::= switch_labels block_statements
> 
> switch_labels ::= switch_label | switch_labels switch_label
> 
> switch_label ::= case constant_expression : | default :
> 
> while_statement ::= while ( expression ) statement
> 
> while_statement_no_short_if ::= while ( expression ) statement_no_short_if
> 
> do_statement ::= do statement while ( expression ) ;
> 
> for_statement ::= for ( for_init_or_not ; expression_or_not ; for_update_or_not ) statement
> for_init_or_not ::= for_init |
3a219,226
> for_update_or_not ::= for_update |
> 
> for_statement_no_short_if ::= for ( for_init_or_not ; expression_or_not ; for_update_or_not ) statement_no_short_if
> 
> for_init ::= statement_expression_list | local_variable_declaration
> 
> for_update ::= statement_expression_list
> 
5a229,248
> break_statement ::= break identifier_or_not ;
> identifier_or_not ::= identifier |
> 
> continue_statement ::= continue identifier_or_not ;
> 
> return_statement ::= return expression_or_not ;
> 
> throws_statement ::= throw expression ;
> 
> synchronized_statement ::= synchronized ( expression ) block
> 
> try_statement ::= try block catches | try block catches_or_not finally_finally
> catches_or_not ::= catches |
> 
> catches ::= catch_clause | catches catch_clause
> 
> catch_clause ::= catch ( formal_parameter ) block
> 
> finally_finally ::= finally block
> 
60c303,305
< primary ::= primary_no_new_array// | array_creation_expression
---
> primary ::= primary_no_new_array | array_creation_expression
> 
> primary_no_new_array ::= literal | this | ( expression ) | class_instance_creation_expression | field_access | method_invocation | array_access
62c307
< primary_no_new_array ::= literal | this | ( expression ) | field_access | method_invocation | array_access
---
> class_instance_creation_expression ::= new class_type ( argument_list_or_not )
66c311
< array_creation_expression ::= new primitive_type dim_exprs dims_or_not// | new class_or_interface_type dim_exprs dims_or_not
---
> array_creation_expression ::= new primitive_type dim_exprs dims_or_not | new class_or_interface_type dim_exprs dims_or_not
76,83d320
< 
< reference_type ::= class_or_interface_type// | array_type
< 
< class_or_interface_type ::= class_type | interface_type
< 
< argument_list_or_not ::= argument_list |
< 
< //array_type ::= type [ ]
